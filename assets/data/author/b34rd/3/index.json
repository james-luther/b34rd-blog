{"hash":"7eea66335e3101fb2bdf96a4df7b72a3d5630259","data":{"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/","belongsTo":{"totalCount":18,"pageInfo":{"totalPages":3,"currentPage":3},"edges":[{"node":{"id":"2722ad0a4603063f9213670c4ce5b19f","title":"Aluminum Watercooling Fun","datetime":"2018-10-19 00:00:00","path":"/aluminum-watercooling-fun/","content":"<p>I was pondering the other day while pricing out parts for a new build about EK’s aluminum line and questioned to myself “Why don’t they have acrylic sides?”. After doing a bit of research I didn’t see a reason not to other than the fact the aluminum blocks aren’t as pretty with them compared to the nickel blocks. Maybe it’s because of UV lights effect on galvanic corrosion. I need to find out about the second one. I decided to give it a go!</p>\n<p>For those who don’t know what galvanic corrosion is and why it is something important to think about when using aluminum, here are some links:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Galvanic_corrosion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Galvanic_corrosion</a>\n<a href=\"https://galvanizeit.org/design-and-fabrication/design-considerations/dissimilar-metals-in-contact\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://galvanizeit.org/design-and-fabrication/design-considerations/dissimilar-metals-in-contact</a></p>\n<p>From the links in the rabbit hole I fell through, I saw some data suggesting UV light would accelerate things but I had to test it out for myself. My thoughts are if in a case, with indirect sunlight what happens?</p>\n<p>First things first, I had to ensure my laser was functioning. I had a few hiccups along the way, I didn’t have the software installed, once I did get it installed I found the laser had a damaged lens, and finally, after replacing, I had to re-zero and re-calibrate the laser. Once all was done, I got to designing the acrylic.</p>\n<p>The acrylic wasn’t difficult at all to plan out. I just took the current block and some calipers and began measuring. Once all my references were documented I began drawing out the rectangle and screw holes. It took me maybe an hour or so to finish and refine all measurements for cutting. The laser was prepped and cutting began!\n<br></p>\n<iframe width=\"560\" height=\"315\" align=\"center\" src=\"https://www.youtube.com/embed/uARsiJgUioc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\nThe cut came out nearly perfect! I was off 0.5 millimeters on two screw holes that I fixed quickly in the cut file. They weren’t off enough to prevent screws from threading and tightening, it was off just enough to make my perfectionist nature upset and force me to change it.\n<p>Installing was a breeze, even with the two holes that were off slightly. Everything connected up perfectly!</p>\n<p><img src=\"https://miro.medium.com/max/500/1*xQHw-JytLCA1_SohFX1mYA.jpeg\" alt=\"alt text\" title=\"cut sheet\"></p>\n<p><img src=\"https://miro.medium.com/max/500/1*DTLnTpmCTwStgAYFV0yEkQ.jpeg\" alt=\"alt text\" title=\"on gpu block\"></p>\n<p>From here it was time to setup and plumb everything. The test bed is as follows: EK-AC GeForce GTX water block, EK-XRes Revo D5 pump/res combo, EK Cryofuel premix in clear, the custom cut acrylic, and flexible tubing. Temperature is climate controlled at 75 F with 56% humidity. The card is not functioning due to lightning damage and that suits this testing in case anything were to go wrong. Heat will be applied from controlled source at controlled times and for controlled duration.</p>\n<p>So far so good and after weeks of testing, all temperatures have been consistent with before and there has been zero warping, leaks, or anything with the acrylic. </p>\n","excerpt":"I was pondering the other day while pricing out parts for a new build about EK’s aluminum line and questioned to myself “Why don’t they have acrylic sides?”. After doing a bit of research I didn’t","description":"Making our own acrylic and aluminum gpu waterblock","timeToRead":2,"tags":[{"id":"watercooling","title":"watercooling","path":"/tag/watercooling/"},{"id":"laser cutting","title":"laser cutting","path":"/tag/laser%20cutting/"}]}},{"node":{"id":"ee9f6dec91e1477b5900db47d3ca50a4","title":"HTPC Part 1","datetime":"2018-10-15 00:00:00","path":"/htpc-part-1/","content":"<p>My kids have been going crazy about video games lately. They want to play PS4, PS3, Nintendo Switch, etc all the time! I figured, why not try to combine all of that into one device, it will save a ton of space in the entertainment center…</p>\n<p>So, that’s what I went and did!</p>\n<p>Materials:</p>\n<p>— Fractal Design Core 500 ($74.99 <a href=\"https://amzn.to/2yGv0wx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2yGv0wx</a>)</p>\n<p>— EVGA 650W B3 80 Plus Gold Modular Power Supply ($69.99 <a href=\"https://amzn.to/2yCZyiB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2yCZyiB</a>)</p>\n<p>— 2 x Team Group L5 1TB SSDs ($172.99 <a href=\"https://amzn.to/2CLQ5tA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2CLQ5tA</a>)</p>\n<p>— Team T-Force Vulcan Gaming DDR4 3200 RAM (~$150 <a href=\"https://www.newegg.com/Product/Product.aspx?Item=N82E16820331172\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.newegg.com/Product/Product.aspx?Item=N82E16820331172</a>)</p>\n<p>— Samsung 970 EVO M.2 250 GB SSD ($92.99 <a href=\"https://amzn.to/2pVsYV4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2pVsYV4</a>)</p>\n<p>— Gigabyte GA-AB350N Gaming Wifi Mini ITX motherboard ($109.99 <a href=\"https://amzn.to/2pRJAx2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2pRJAx2</a>)</p>\n<p>— AMD Ryzen 7 2700X ($294.98 <a href=\"https://amzn.to/2CNdc7t\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2CNdc7t</a>)</p>\n<p>— EVGA GeForce 1080 Ti Founders Edition (~$450 <a href=\"https://amzn.to/2pRzVGN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2pRzVGN</a>)</p>\n<p>— EK Fluid Gaming 240G Water Cooling Kit ($239.99 <a href=\"https://www.ekfluidgaming.com/ek-kit-a240g\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.ekfluidgaming.com/ek-kit-a240g</a>)</p>\n<p>— EK Vertical Mount kit ($14.99 <a href=\"https://www.ekfluidgaming.com/ek-uni-pump-bracket-120mm-fan-vertical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.ekfluidgaming.com/ek-uni-pump-bracket-120mm-fan-vertical</a>)</p>\n<p>— EK aluminum fittings: 2 x 45 elbow1 x 90 degree elbow, 1 x GPU rotary terminal, 1 x T-splitter (<a href=\"https://www.ekfluidgaming.com/parts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.ekfluidgaming.com/parts</a>)</p>\n<p>— Pair of Bitdo SN30 Bluetooth Controllers ($44.99 <a href=\"https://amzn.to/2CM4t5q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2CM4t5q</a>)</p>\n<p>Total Cost New: $1,971,83</p>\n<p><em>Used parts and searching for deals will reduce cost</em></p>\n<p>The setup of the computer was very straightforward. Remove the original cooler mounts from the motherboard, install EK mounts for the aluminum block, install processor and RAM, then install the motherboard into the case. Don’t forget to put the IO shield in first! Next, we install the water block on the graphics card. After installing the card into the case we need to plan out the runs and get the cooling installed. Yes, you can do custom loops in this case. You need the vertical mount to install the pump/reservoir combo outside the case on the rear fan mounts. I use a dremel to remove some of the metal on the vent from the GPU blower and route my tubing through there.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*yee5sXIDH1d-P3AST2vUtg.jpeg\" alt=\"alt text\" title=\"tubing through gpu vent\"></p>\n<p>Once we have everything set up, the loop all ready, and the system booting, it is time to decide on OS. My preference was to use Arch but with the gaming for the kids, I think Windows 10 is the best choice (this is only because I don’t want to have to test Steam Play or DXVK for every game they want to play… caveat: I think this is likely the best choice in the near future). For the HTPC part, I went with Kodi. I installed PlexKodiConnect, and wrote a few custom scripts to run Sling as well as a few other simple apps that don’t yet have plugins (these will be on my github page github.com/captainhooligan). For their games, I have the Steam Plugin as well as the BigBox plugin. Launchbox is amazing if you want to set up a gaming PC that is connected to your TV. You can set it to run on boot and everything is seamless! For the emulation, there is nothing better than RetroArch. It covers most of the consoles we are playing minus PS2, PS3, and Wii U. For those, I went with RPCS3 for PS3, PCSX2 for PS2, and Dolphin for Wii U. I didn’t work too hard at getting the dolphin core in RetroArch to run Wii U games, but I’m sure it can be done. The external dolphin emulator works great and can easily be integrated into LaunchBox. There are some tweaks that need to be done for each one and the community forums for each are very well documented.</p>\n<p>Notes: The EK 240G is an amazing product! For the price, there is absolutely no reason to not include it in any build.</p>\n<p>With everything installed and running, it’s time to overclock and test some games! Benchmarks coming in part 2</p>\n","excerpt":"My kids have been going crazy about video games lately. They want to play PS4, PS3, Nintendo Switch, etc all the time! I figured, why not try to combine all of that into one device, it will save a","description":"HTPC and console replacement build","timeToRead":3,"tags":[{"id":"htpc","title":"htpc","path":"/tag/htpc/"},{"id":"gaming","title":"gaming","path":"/tag/gaming/"},{"id":"emulation","title":"emulation","path":"/tag/emulation/"},{"id":"amd","title":"amd","path":"/tag/amd/"},{"id":"watercooling","title":"watercooling","path":"/tag/watercooling/"}]}},{"node":{"id":"ab6edd31c8cc47bfc9c5a58e165177b4","title":"Install RuiDa Laser Works in Arch/Manjaro Linux","datetime":"2018-10-15 00:00:00","path":"/install-rui-da-laser-works-in-arch-manjaro-linux/","content":"<p>So, I have a laser cutter/engraver that I put together from some scrap parts. Basically, I was poking around on eBay one day and a 50W CO2 laser showed up. I looked around for one at a decent price that was within the budget I was willing to spend and failed. What I did find in my budget were parts. After they all arrived I put everything together and had a laser engraver minus the controller board. A quick Amazon search led me to RuiDa. It was cheap and worked for what I had. Getting this running was simple. I installed a Virtual Box instance of Windows 10, installed the software, and went about my business. Until …</p>\n<p>My VM died!! Really, the entire hard disk failed and I had no backup. I rebuilt and decided to run in Linux instead of dealing with any virtual machines this time around. That was a little over a year ago. I’ve since rebuilt again (this time I had backups) and went with Manjaro as the OS of choice. Installing RDLaserWorks in Linux is a breeze with wine. On all distros, it’s pretty much the same minus a few different packages. If someone wants a how-to for a specific distro, I will gladly try to help you out.</p>\n<p>Let’s get started!</p>\n<p>First we need to install the required packages.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">sudo pacman -S wine-staging-nine wine-mono wine_gecko winetricks</span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*tSPBSZ-aCy0jreF66cEbaQ.png\" alt=\"alt text\" title=\"installation via pacman\"></p>\n<p>This only takes a minute depending on your network connection. Once finished we run</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">winetricks</span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*b17-9JuXd_ezzlzwsApkrQ.png\" alt=\"alt text\" title=\"winetricks\"></p>\n<p>We need to select the wineprefix we wish to use and install some resources. The specific ones we need are <pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">cmd, mfc42, and vcrun6</span></span></code></pre>. Once selected and installed we can exit winetricks and begin the installation.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*Mq8D2Xru9u128qDbawluZw.png\" alt=\"alt text\" title=\"install dll or component\">\n<br></p>\n<p><img src=\"https://miro.medium.com/max/1000/1*dPzkC8GxSYFjv9EP7vN77A.png\" alt=\"alt text\" title=\"cmd\"></p>\n<p><img src=\"https://miro.medium.com/max/1000/1*3jPOZGai1DdjY-RU3lO36w.png\" alt=\"alt text\" title=\"mfc42\"></p>\n<p><img src=\"https://miro.medium.com/max/1400/1*8xncj5b4Rn7-WQaae0EFhA.png\" alt=\"alt text\" title=\"vcrun6\"></p>\n<p>From here we can find our copy of RDLaserWorks and install. If you don’t have this software, you can download directly from RuiDA here: Ruida Downloads. There you select the version you wish to use.</p>\n<p>To install:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">wine /path/to/installer.exe</span></span></code></pre>\n<p>Follow the prompts of the installer just like you would on Windows.</p>\n<p><img src=\"https://miro.medium.com/max/552/1*pbPszyCQacJMqC2ZA6tVLw.png\" alt=\"alt text\" title=\"wizard\"></p>\n<p><img src=\"https://miro.medium.com/max/552/1*1jiZlO2s1eGzEV7YUxrqzg.png\" alt=\"alt text\" title=\"installation\"></p>\n<p><img src=\"https://miro.medium.com/max/305/1*aUixCgtSioPS3do3vhdoFA.png\" alt=\"alt text\" title=\"usb driver\"></p>\n<p>Don’t install the USB driver. Just click the install button and upon completion click exit. You’re finished! On the RuiDa controller specify an IP address and connect it to a switch or an access point. Open up RDWorks, connect to your controller and get to engraving/cutting!</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*56vRUk28Lx-eeC-Qi_62Jw.png\" alt=\"alt text\" title=\"RDWorks\"></p>\n<p>Oh, you will need to do some configuration, but, it’s no different than on Windows.</p>\n<p>If you’re interested in a laser engraver but don’t want to deal with shopping for parts, Amazon is a great place. Here’s the closest they have to my setup: <a href=\"https://amzn.to/2Ch8NIO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://amzn.to/2Ch8NIO</a></p>\n","excerpt":"So, I have a laser cutter/engraver that I put together from some scrap parts. Basically, I was poking around on eBay one day and a 50W CO2 laser showed up. I looked around for one at a decent price","description":"Installing the sofware to manage RuiDa laser controller in Arch based Linux distributions","timeToRead":2,"tags":[{"id":"wine","title":"wine","path":"/tag/wine/"},{"id":"arch","title":"arch","path":"/tag/arch/"},{"id":"laser cutting","title":"laser cutting","path":"/tag/laser%20cutting/"}]}},{"node":{"id":"b5a42ad62d3385f6234cd762b775da47","title":"Breathe New Life into 2009 Mac Pro","datetime":"2018-10-04 00:00:00","path":"/breathe-new-life-into-2009-mac-pro/","content":"<p>The Mac Pro circa 2009 is an amazing machine. The case is too damn beautiful to not show off and to be honest, the hardware isn’t a slouch either! It was and is a desktop server, with the dual Xeon processors from Intel and up to 128 GB of RAM (after you update the firmware) the machine can go a long way for a LONG time. I originally purchased this for development. At the time I was doing a LOT of mobile research on iOS and MacOS in general. The common denominator for testing and developing was the need for Apple hardware. The price tag in 2009 wasn’t too bad either, for $2500 I was able to score an Apple Display and the Mac Pro with an ATI Radeon HD 5770, Dual 2.26 Quad Core Xeons, and 16 GB of RAM. Even at 2009 prices, that’s a steal!</p>\n<p>For easily two years this machine was a monster at every task I threw at it. Once I moved on to more Android-based security research I found MacOS was severely lacking. It was great for development but not for much else I did. This drove me to install Linux. I went with OpenSuSE because of the stability and how developer friendly it has always been (my opinion has since changed as I’m a die-hard Arch guy these days but that’s not the point here). Things were going great and research was rocking! Moving on another year or two life struck and kids happened. I was no longer able to spend evenings researching and the computer sat which brings me to today, 2018. I have a 9 (more like 10) year old computer that has the potential for new life. Here’s where we start…</p>\n<p>My plan is to install Arch and make this beast into a KVM server. I’m going to upgrade the RAM to 128GB and host virtual machines for Node-Red, Web services, Motion, Home Assistant, Plex, NextCloud, and probably make one for a NAS, and possibly a few others. Let’s get started…</p>\n<p>First, we need to get a copy of Arch. Head over to archlinux.org/download and grab a copy of the latest iso.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*49sHvnr4p0Vy32d0Rl5IYA.png\" alt=\"alt text\" title=\"Arch Linux Download Page\"></p>\n<p>Make sure after you’ve downloaded you verify the hash.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*2Ii7C0vqlMGjG8yV6u56MQ.png\" alt=\"alt text\"></p>\n<p>Now we can either burn the iso to a disk or copy to flash drive. I prefer the flash route.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># dd if=/path/to/archlinux.iso of=/dev/my/usb/device bs=4M.</span></span></code></pre>\n<p>Upon completion, plug into the Mac, hold the option key, and boot up!</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*mrWs53QTngfpwNqlJy2shw.jpeg\" alt=\"alt text\" title=\"Hold Option Key while Booting\"></p>\n<p>It may take a bit for the screen to display but eventually, you will get some boot options:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*IngJM5tr0MnAaAVHEQleEw.jpeg\" alt=\"alt text\" title=\"Boot Options\"></p>\n<p>Make sure you select the disc or the USB device you loaded your Arch iso onto. From here we are brought to a root terminal and can begin our install. For those who have never used Arch Linux in the past, the wiki is amazing. It is probably the BEST documented of any distribution of Linux and will help you in every way. Based on what you want to accomplish, the wiki will guide you through the remainder of the install. You can see it here: <a href=\"https://wiki.archlinux.org/index.php/installation_guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wiki.archlinux.org/index.php/installation_guide</a>.</p>\n<p>Now, we have network connectivity and have set our timezone. Time for us to get started. Since we’re going to install an LVM RAID, we need to turn on smartctl for our devices. Just open up your favorite editor (I prefer vim) and edit /etc/smartd.conf. I added the following lines for my devices:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*Hmnl_3_YCxZwLhlMKUpFmA.png\" alt=\"alt text\" title=\"Adding devices to smartd\"></p>\n<p>Time to partition and set up our RAID. Depending on your version of Arch and fdisk, it may be different and since these drives have been used in the past, I’m just going to delete all partitions and set them up as Linux filesystem type. We need to make sure to create a ~200MB partition for EFI. When we make the EFI partition, set the type to 1, EFI. After this is created, execute “fdisk /dev/sdx” for your device and delete partitions (minus your EFI partition), create a new primary partition, and set the partition type, then finally write the changes. You will need to do this for every device you are adding to your LVM RAID.</p>\n<p><img src=\"https://miro.medium.com/max/1470/1*9oh7iRJerbkncyNTOdVM9w.png\" alt=\"alt text\" title=\"Creating our EFI filesystem\"></p>\n<p>Here is where I start doing things a little differently than the install wiki. Now, I use LVM on the array to setup volume groups… From there, we install our base system and continue. To do this we run</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># pvcreate /dev/sdx, vgcreate VolGroup00 /dev/sdx. </span></span></code></pre>\n<p>We will then verify everything with vgdisplay. After verifying we create our logical volume as raid 5 and use all the space available.</p>\n<p><img src=\"https://miro.medium.com/max/552/1*SC0hi8TdBwndc-5NFemSzA.png\" alt=\"alt text\" title=\"vgdisplay output\"></p>\n<p><img src=\"https://miro.medium.com/max/552/1*ZFBV88S9LjDhly5ATd2ruA.png\" alt=\"alt text\" title=\"lvcreate\"></p>\n<p><img src=\"https://miro.medium.com/max/1400/1*Hsz-w97H7_ywhpk3aJSMHA.png\" alt=\"alt text\" title=\"lvdisplay\"></p>\n<p>From here we mount everything and run pacstrap with our base package selection. First we mount our arch-root to /mnt and our EFI to /mnt/boot. This is accomplished by executing:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># mount /dev/VolGroup00/arch-root /mnt</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># mkdir /mnt/boot</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># mount /dev/sda1 /mnt/boot</span></span></code></pre>\n<p>We need to run pacstrap to get our base installed. You can add any package groups along with this command but I prefer to just install the base and then select individual packages with pacman in chroot step.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># pacstrap /mnt base </span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*1pE4Lm2kxW8ne6LqfC5evQ.png\" alt=\"alt text\" title=\"pacstrap installing base\"></p>\n<p>Once complete, we generate our fstab.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab’. </span></span></code></pre>\n<p>Now we go into our chroot and finish up.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># arch-chroot /mnt</span></span></code></pre>\n<p>We set our timezone, run hwclock, set locale, specify LANG and keymap. Then we configure networking and install our bootloader. These steps don’t differ from the Arch installation wiki until it comes to bootloader.</p>\n<p>Since this is a Mac we need to install intel-ucode package. This package is microcode for the processor. The BIOS updates will sort this out for you but, we aren’t able to update our bios. This is super important for us especially after spectre and meltdown updates were released.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*XO3wWmU94kBYtkXXEcAqYg.png\" alt=\"alt text\" title=\"install of intel-ucode package\"></p>\n<p>Let’s go ahead and install all the KVM packages and requirements. We need to verify the kernel installed supports virtualization. We can check with:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># lsmod | grep kvm</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># lsmod | grep virtio</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># zgrep VIRTIO /proc/config.gz </span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*BIsyJYXnIzNGoeGAcawLKQ.png\" alt=\"alt text\" title=\"checking kvm status\"></p>\n<p>From here we need to install the qemu package and libvirt package. I’m going with qemu-headless since this machine is going to run without a display and be managed remotely.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*R2g6T7zVqMoKGUwenaE4mA.png\" alt=\"alt text\" title=\"qemu installation\"></p>\n<p>Once complete you will see a few additional packages suggested. If you feel the need for them, go for it. It all depends on your system. I installed samba as well as the qemu extras.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*GhGZvA36wVIp0SbLhBlM8g.png\" alt=\"alt text\" title=\"qemu extras\"></p>\n<p>The last thing I’m going to do is create a general user and setup sshd. To add my user, run:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># useradd -m -g users -G wheel,storage,power -s /bin/bash username</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># passwd username</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># pacman -S sudo</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># vi /etc/sudoers</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># uncomment the line below:</span></span>\n<span class=\"line\"><span style=\"color: #24292EFF\">%wheel ALL=(ALL) ALL</span></span></code></pre>\n<p>Next, we need to install openssh.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># pacman -S openssh </span></span>\n<span class=\"line\"><span style=\"color: #24292EFF\"> - Next we edit our sshd config</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># vi /etc/ssh/sshd_config</span></span></code></pre>\n<p>Here there are only a few things we need to specify, our listen address, listen port, users allowed, and to disable root login.</p>\n<p>After we make our edits we enable the service…</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># systemctl enable sshd.service</span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/552/1*OxWwK3vgM0liljAhMbvG0w.png\" alt=\"alt text\" title=\"install openssh\"></p>\n<p><img src=\"https://miro.medium.com/max/552/1*wbFE_ECx8ktNIgjNboSW0w.png\" alt=\"alt text\" title=\"uncomment listen port and address\"></p>\n<p><img src=\"https://miro.medium.com/max/1400/1*HHIZjZii-Xps2v0bcGMoww.png\" alt=\"alt text\" title=\"specify users and disable root in sshd\"></p>\n<p>Now that we’ve finished all of this let’s setup the ramfs and our bootloader.</p>\n<p>To begin we need to add some lvm items to /etc/mkinitcpio.conf.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># vi /etc/mkinitcpio.conf</span></span>\n<span class=\"line\"><span style=\"color: #24292EFF\"> -- We need to add systemd and sd-lvm2 to the HOOKS section --</span></span>\n<span class=\"line\"><span style=\"color: #24292EFF\"> -- We also need to add dm-raid raid0 raid1 raid10 raid456 to the MODULES section --</span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*Xfg1uI5EpHAaWL2fT00hHg.png\" alt=\"alt text\" title=\"adding items to hooks\"></p>\n<p>Once we save we can generate run:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># mkinitcpio -p linux</span></span></code></pre>\n<p>Lastly, we install our systemd bootloader and configure it. This is done with two commands:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #C2C3C5\"># bootctl --path=/boot install</span></span>\n<span class=\"line\"><span style=\"color: #C2C3C5\"># bootctl --path=/boot update</span></span></code></pre>\n<p>Reboot and enjoy!</p>\n<p>Arch can be a bit intense for an install but it is well worth it when finished.</p>\n<p>References:\nS.M.A.R.T. - ArchWiki\nS.M.A.R.T. (Self-Monitoring, Analysis, and Reporting Technology) is a supplementary component built into many modern…\nwiki.archlinux.org\nInstallation guide - ArchWiki\nThis document is a guide for installing Arch Linux from the live system booted with the official installation image…\nwiki.archlinux.org\nLVM - ArchWiki\nVirtual partitions allow addition and removal without worry of whether you have enough contiguous space on a particular…\nwiki.archlinux.org\nGRUB - ArchWiki\nGRUB (GRand Unified Bootloader) is a multi-boot loader. It is derived from PUPA which was a research project to develop…\nwiki.archlinux.org\nMicrocode - ArchWiki\nProcessor manufacturers release stability and security updates to the processor microcode. While microcode can be…\nwiki.archlinux.org\nEFI system partition - ArchWiki\nAccording to a Microsoft note[2], the minimum size for the EFI system partition (ESP) would be 100 MiB, though this is…\nwiki.archlinux.org\nMeltdown and Spectre\nMeltdown and Spectre exploit critical vulnerabilities in modern processors. These hardware vulnerabilities allow…\nmeltdownattack.com\nKVM - ArchWiki\nKVM, Kernel-based Virtual Machine, is a hypervisor built into the Linux kernel. It is similar to Xen in purpose but…\nwiki.archlinux.org\nQEMU - ArchWiki\nWhen used as a machine emulator, QEMU can run OSes and programs made for one machine (e.g. an ARM board) on a different…\nwiki.archlinux.org</p>\n","excerpt":"The Mac Pro circa 2009 is an amazing machine. The case is too damn beautiful to not show off and to be honest, the hardware isn’t a slouch either! It was and is a desktop server, with the dual Xeon","description":"Taking an old Mac Pro from 2009 and repurposing with Arch and ZFS","timeToRead":7,"tags":[{"id":"arch","title":"arch","path":"/tag/arch/"},{"id":"mac pro","title":"mac pro","path":"/tag/mac%20pro/"},{"id":"zfs","title":"zfs","path":"/tag/zfs/"}]}},{"node":{"id":"2c3202f886ea59fd538192e788d40812","title":"Aquaponics","datetime":"2018-10-03 00:00:00","path":"/aquaponics/","content":"<p>I’m going to talk a bit about aquaponics and why I care about it. First, let’s talk about what is aquaponics. The definition: Aquaponics — a system of aquaculture in which the waste produced by farmed fish or other aquatic animals supplies nutrients for plants grown hydroponically, which in turn purify the water. I think that’s pretty self-explanatory, if not, I will be sure to link a few articles at the end. So, why do I care? Well, it is because food independence is a big deal for me and I decided to convert my current greenhouse into an aquaponic one. Here’s the story…</p>\n<p>First, I had to decide what I was planning on growing, what kind of fish, and how I was going to accomplish all of this. To start, I took inventory of scraps I had around the farm. We recently rebuilt our barn and some plumbing throughout the house which gave me quite a bit of scrap wood, cinderblocks, and PVC. That was a great start! From there I decided an ebb and flow or flood and drain setup worked best to start. How this works: water from the fish tank is pumped into the grow bed and then drained after reaching a certain point. This is done either by another pump that is actuated by a switch or a siphon of some kind. I chose to use a bell siphon.</p>\n<p><img src=\"https://miro.medium.com/max/232/1*YR8W9JBWckSZvTT7TypU1g.jpeg\" alt=\"alt text\" title=\"basic flood and drain setup\"></p>\n<p>Let’s first take a look at how this whole thing was configured in the first place. We had a lot of irrigation lines and sprinklers to start seedlings. For the first two years, I would start hop rhizomes and other plants prior to transplanting out in the fields. This worked quite well.</p>\n<p><img src=\"https://miro.medium.com/max/1000/1*dIgVIiVM7qEFGz8UUicKTw.jpeg\" alt=\"alt text\" title=\"original greenhouse setup\"></p>\n<p><img src=\"https://miro.medium.com/max/1000/1*YeJ9sg6PZr16xXgn5GCOOA.jpeg\" alt=\"alt text\" title=\"original greenhouse setup\"></p>\n<p>We had quite a bit of space and material to work with. From here I had to decide how to build the whole thing. I mapped out the greenhouse and based on the items I had, I decided to dig a sump that was 4 feet deep by 10 feet long and 2 feet wide. This gave me about a 600 gallon sump/pond. With 600 gallons I could easily run 20 or so grow beds that are 24 inches x 36 inches x 13 inches. Once they were all placed I marked it out on the ground and got to digging.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*BBNvMijqU6_SKDgFnEtEvg.jpeg\" alt=\"alt text\" title=\"beds setup and pond marked to dig\"></p>\n<p>Hand digging the pond/sump was no easy task. The ground was all clay and full of large rocks. Once completed, it looked great! From here I used an old cone tank I previously used for homebrewing to build a swirl filter. After doing some calculations to decide the flow rate of the pump I got to plumbing. The pump was setup to recirculate some of the water to the other side of the pond for surface agitation and to create a current, while the majority went into the swirl filter. This is very much less than ideal but due to the limits of pipe I had (again, this was all made from scraps) it was what I went with. All the beds were plumbed and rocking! Within a few weeks we had growth and everything looked amazing. I transplanted some tilapia fingerlings into the pond after cycling the system for 4 weeks or so and things were going great!</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*ZMicUNPysPRAfjzATwPCKg.jpeg\" alt=\"alt text\" title=\"completed greenhouse\"></p>\n<p>Here’s where the automation came in. I figured why not setup a way to monitor water quality, flow rates, temperatures, etc. Well, I grabbed an arduino, a raspberry pi zero, and all the sensors I could find. With the items I had lying about in my office I setup a DHT11 to monitor the air temperature and humidity, an EC monitor, a pH monitor (I had both of these from previously trying to automate pH and EC adjustments in homebrewing), a DS18B20, and an SF800. I initially wired these all up and connected to the arduino and an I2C 16x2 display. This would scroll the information for me and I could easily walk in and see how everything was going. This wasn’t enough for me. In came the Pi Zero. I connected the arduino to the Pi using an OTG cable and set the Pi to pass information over mqtt. I setup Home Assistant previously to manage home automations (that’s coming in another post). I created a tab in Home Assistant just for the greenhouse that would provide live updates of the readings. I then added a camera to the Pi and some OSRam lightify bulbs (I’m not sure where these came from but I don’t recommend). The greenhouse was able to provide live data and the lights were able to be remotely managed by home assistant or the OSRam Lightify cloud application.</p>\n<p>I have since taken out the Pi and disconnected the arduino. This is mostly because it was put together without prior thought and I’d really like to do something more professional. There will be a follow up to this with code and video showing the upgrades.</p>\n<p>Notes: OSRam lightify is NOT something I would ever suggest. The lights use Z-wave, which isn’t my first choice but honestly, if someone wants to replay packets and turn on and off lights in a greenhouse I don’t care. My issue is the controller. It is a very basic device that is setup through their app, much like most IoT devices, and connects to local wifi. It is impossible to use it in a local only setup. I had to set special firewall rules to disable the information it was constantly sending out. Home Assistant came in very handy with allowing me to control with only local network access instead. Anyone who is into home automations should really take a look (homeassistant.io). It is a great piece of software that is 100% open source.</p>\n<p>Links:</p>\n<p>What is Aquaponics — <a href=\"https://www.theaquaponicsource.com/what-is-aquaponics/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.theaquaponicsource.com/what-is-aquaponics/</a></p>\n<p>Home Assistant — <a href=\"https://www.home-assistant.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.home-assistant.io/</a></p>\n","excerpt":"I’m going to talk a bit about aquaponics and why I care about it. First, let’s talk about what is aquaponics. The definition: Aquaponics — a system of aquaculture in which the waste produced by","description":"Converting greenhouse to aquaponics","timeToRead":4,"tags":[{"id":"iot","title":"iot","path":"/tag/iot/"},{"id":"aquaponics","title":"aquaponics","path":"/tag/aquaponics/"},{"id":"raspberry pi","title":"raspberry pi","path":"/tag/raspberry%20pi/"},{"id":"arduino","title":"arduino","path":"/tag/arduino/"},{"id":"greenouse","title":"greenouse","path":"/tag/greenouse/"}]}},{"node":{"id":"572d8bec3285f5a96b06cb6939c210d0","title":"Leroy Jenkins","datetime":"2013-11-01 00:00:00","path":"/leroy-jenkins/","content":"<p>How many of you use Jenkins or even know what it is? Well, I’ve been running into it quite a bit lately and I found a few ways of using it to gain access to other servers within an enterprise or organization. From the Jenkins website (<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins</a>)</p>\n<p>Jenkins is an award-winning application that monitors executions of repeated jobs, such as building a software project or jobs run by cron. Among those things, current Jenkins focuses on the following two jobs:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">1. ***Building/testing software projects continuously***, just like CruiseControl or DamageControl. In a nutshell, Jenkins provides an easy-to-use so-called continuous integration system, making it easier for developers to integrate changes to the project, and making it easier for users to obtain a fresh build. The automated, continuous build increases the productivity.\n2. ***Monitoring executions of externally-run jobs***, such as cron jobs and procmail jobs, even those that are run on a remote machine. For example, with cron, all you receive is regular e-mails that capture the output, and it is up to you to look at them diligently and notice when it broke. Jenkins keeps those outputs and makes it easy for you to notice when something is wrong.</span></span></code></pre>\n<p>Jenkins is actually a great tool and I love using it now! What is fun and interesting about Jenkins or Hudson (the predecessor to Jenkins) is the ability to use a groovy script console located on the server as well as all slave nodes. This is done from the Jenkins server script console url, <a href=\"http://jenkins-server/script\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://jenkins-server/script</a>. This will vary per instance but whatever url brings up the Jenkins dashboard just add a /script to it and you get the script console. From here you can do anything you can do with Groovy script. What can this buy you? Well, you can access the os with some script, you can poll jobs, you can do all sorts of things. Here’s what the dashboard looks like:</p>\n<p><img src=\"https://miro.medium.com/max/600/0*uGfAy-M6s2NUispk\" alt=\"alt text\"></p>\n<p>Back to Leroy here, well, Leroy Jenkins automates the whole process. It simplifies the scripting by providing you with a console to run whatever commands you want remotely and on any nodes available. It is available on my github. You can download it by running git clone <a href=\"https://www.github.com/captainhooligan/Leroy-Jenkins.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.github.com/captainhooligan/Leroy-Jenkins.git</a>.</p>\n<p>Here’s Leroy’s interface:</p>\n<p><img src=\"https://miro.medium.com/max/600/0*M3GnejA-UoE-ZGio.\" alt=\"alt text\"></p>\n","excerpt":"How many of you use Jenkins or even know what it is? Well, I’ve been running into it quite a bit lately and I found a few ways of using it to gain access to other servers within an enterprise or","description":"Tool for remotely connecting to Jenkings Groovy Console","timeToRead":2,"tags":[{"id":"python","title":"python","path":"/tag/python/"},{"id":"jenkins","title":"jenkins","path":"/tag/jenkins/"},{"id":"linux","title":"linux","path":"/tag/linux/"},{"id":"tools","title":"tools","path":"/tag/tools/"}]}}]}}},"context":{}}