{"hash":"7eea66335e3101fb2bdf96a4df7b72a3d5630259","data":{"posts":{"totalCount":18,"pageInfo":{"totalPages":3,"currentPage":2},"edges":[{"node":{"id":"a009fc1db862c6288f2b93a161af0c40","title":"Using GPU Accelerated Hashcat on Google Colaboratory FREE!","timeToRead":4,"datetime":"2020-06-18 00:00:00","content":"<p>I know this may sound too good to be true, but trust me on this one ...</p>\n<p><img src=\"https://i.ytimg.com/vi/G1qMhesHagk/maxresdefault.jpg\" alt=\"alt text\" title=\"Google Drive\"></p>\n<hr>\n<h3 id=\"intro-to-google-colaboratory\"><a href=\"#intro-to-google-colaboratory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Intro to Google Colaboratory</h3>\n<p>Colaboratory, or \"Colab\" for short, allows you to write and execute Python in your browser, with</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">Zero configuration required\nFree access to GPUs\nEasy sharing</span></span></code></pre>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/inN8seMm7UI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\nFrom Google\n\"Colab notebooks allow you to combine executable code and rich text in a single document, along with images, HTML, LaTeX and more. When you create your own Colab notebooks, they are stored in your Google Drive account. You can easily share your Colab notebooks with co-workers or friends, allowing them to comment on your notebooks or even edit them. To learn more, see Overview of Colab. To create a new Colab notebook you can use the File menu above, or use the following link: create a new Colab notebook.\n<p>Colab notebooks are Jupyter notebooks that are hosted by Colab. To learn more about the Jupyter project, see jupyter.org.\"</p>\n<p>Here is link to learn more:</p>\n<p> <a href=\"https://colab.research.google.com/notebooks/intro.ipynb#scrollTo=lSrWNr3MuFUS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://colab.research.google.com/notebooks/intro.ipynb#scrollTo=lSrWNr3MuFUS</a></p>\n<h3 id=\"using-hashcat-in-colab\"><a href=\"#using-hashcat-in-colab\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Using Hashcat in Colab</h3>\n<p>Let's just dive into what we are going to do for now with colab... HASHCAT</p>\n<p><img src=\"https://tech-files.com/wp-content/uploads/2017/05/gpu-accelerate-cracking-passwords-with-hashcat.1280x600.jpg\" alt=\"alt text\" title=\"Hashcat\"></p>\n<p>If you don't know what hashcat is, why are you reading this??? I'm kidding, hashcat is a gpu accelerated password cracking tool. To learn more check out the project website:</p>\n<p><a href=\"https://hashcat.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hashcat.net</a></p>\n<p>Ok... so let's get started on setting up hashcat in Colaboratory. It is super easy.</p>\n<p>First we need to open up google drive and select new Colab Page</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 659 523' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-273e12052592bd0059b7075baa5cf2d8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-273e12052592bd0059b7075baa5cf2d8)' width='659' height='523' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAzCAYAAAAn3w6xAAAACXBIWXMAAA7CAAAOwgEVKEqAAAANg0lEQVR42sVb%2bW8jWRH2H4bEH4AAAdL%2btELiD0ACxAI/wS4rVloOgRYEWi27wzE7i5CW2cnMziQziXM658Q5HCd2Monv2/Ftt4/u/qiq7tfuOE5i59hpqfT6cvd79aq%2b%2bqr62QOY0AEsh%2b6hm/g7DNo3DB2dbheDm2maGGVT93FbazRRrTdwWq5IW6nVpa01W3JtmNRd19y/uQvxcEcfRjfw3ckfA8dvAO1ZFEst%2bLe2sL%2b/h5NIDEevjpHNF0dWgrrHMAw0aDD54inml5ZxEo2jqbXlOJXJIpPNIZ3L034OuUIBmVyB3lNAIpWWlqVcrd2pEkQB3/ry1/j2fS/ufbGNmaUnqNMF/9YOgsE9UkII3rkFHByeOIPiAV4lcq9tATyIg/ARPeMIjZaG4mkJsXgC0VgccRpsmhSRJUVwm8nnRQGZbBbxZAqlyleggKXYCd7/ooB3HwGrMk4TPd3ATTdWRJ0UwJ1vatpZF3CZvHTGtT94jX9zV%2bLhGe1vuohhWLPI1/piji38jF7PwpN2pyOtIx3rnCVdRzrOvnWtY5%2b7K/F0qTNaW0OLfJNFI2m3b086Mojzwu/VdV2Uq%2bvGgLK/OhEF9Hpd6axGZiqdbnfODYLvu23h544aWe5q83AnXte2E9hHicJjoVAcCVjvQjzNZlM602q1kCXk5RnnjVtlom5Quy3hLZXOkNtpr9cClALS6TR8Ph92d3flOBI9wcqiDzOzXkx7ZwnFO7eqBN4q5bIogAGTceB1iMc94wUiI6VSyYoHeg/1Wg3lSgWVSvVOfPX09BRNIkoKCF%2bLApqtlh22%2bgSHTZ8vugfN4axH57m1rt9cKqRcQ9fHotm37gL1RssatB0WrNl3cwNSysCPZMZuEHp0e9B7ewH4VlaRJCpsPfc1gGC9odkz3EM0GkUul7P9s4RUKklsqYlGvSoAyYidI6raswdw041xhylvq6XdyApuYj1iAbzV63UBwO3tbTmOEwguzHmxEwzj5foq5ufmsLa2htn5JXRJWbcBiIwtyhqMGwLqjS2ATTOVSiFvW4B7042L8gJ%2byPizpTpdJBBsEN/XBVt6Fs6MKTwZCrescz2RbneYdM9c59ajzI8JEZt/164D1GpV1CiLq5FlaBQheIb4nkajAZ2Yo4CnOb4Juu8tUxjsdNpnFDrupgD7um7p0WwiUqOQNz8/j52dHRpgD4lkHMuLS3gxMy3pcCQWweOJJ/AtLWBmegYv/TtWd29gtqwAFYZNU7evcWu4BJc%2bw1FAT3cmslq1MCsWiyEejyOZTIq8evVKCB%2b7Ox/zZDsK6NFBkvJv/qG7oMFmYiF3T37ML1SJzE23Mwq40GIMtTPUkvoKsHCJeczBwQFFmD2srq5iZWUFW1tbco4nl68fHR3h%2bfPn0goTZB93mxDvd5VPuvxTaVrF8ZF9VR9%2bjolQW3IRmtH8H2GkfgKz/oLan8JMvgWzmzurhMsUoMDUMK50SdV/nnzHAvglFvkxYBjGKM48UtxWJMvNIdS10mkBbe5r7AOYe9%2bD2QnBiLwBs/YFzMR7MANvOu5xpQXo/XsG3YQttlgsiiUsLy%2bLJWxubsq%2bRyUj%2baqBPz1rY/XIMqU0cYAo%2bU8ikUAoHBL3iJycIBKJyjkuWowCW2rwKrV2g125ZCvg5Dcwg9%2bnsx0Yx9%2bBWV0Eon8B/N%2b0cWZEBQwJhwoXuM/Mc05oDLzPGBCJRPpRIFPW8avPm5jZs5KeOF0MBPfh9/sxPfMCh0fHCB/sY3s3gP39fTSa2pXxd1ABjCHuzpeJbIkijSaM5M9hJH4As/gpzPWvARtfh9k87LvACAq4rB9XRoEzs3bNsHZRadx9z2AYPAOCLl937jKNS59/mQKUuykKPqgUnhByAWtWcq0K3tl4AG9yxzrOZYn2FiQbTKdT5EOniJFVpNJZ4QuZTMaJBMOUMGgBqgJ01gKUAkwr5Nmz3Q9944XBy2aczzMOcBRg8OU2T7Te07QVEKlm8Y0nb%2bMfB9NyfHJ8iI1NPxYXF/H48WPs7R9gi4BjccmHhUWfAEi1Vh9ZAaxtVXtwK%2bCmFal%2baqs7z2Wl8mB5oPwO5jg8YPf7FXt0XIBZXY2p5TWo7XVdQOoBrZaTIfZlhIzSbpnS8v0ctpVFJgnk5ubm4aNJ8vmWJYdhTrBJeHZ4eIhAYI/4Tk5hgA1MnRLM1H0KQVZFqE5UuEKMillV8bQobT6bQTZXENNhbZojJCHK9xQH7ysFUg9QidXZyNGvSVwmSgHSsgJYKVdEJt3FE8QC2koBrTg64V%2bil5%2bU43BwF77VNaK%2bS5iYeITdQBDLRIOnZxeIRU3hIBQey0LYBTiPcG8cjuJEV%2bUTGJkqSybDdcnRym%2bwvzsoosbnGvc/hvZsAm3CnByx2mq14vh8sVCQ3Ibdg9NwuybYEI33uho65V30WgVCVNM1GxZjGjR1RZNHEQZAZbrqnEnP3dry4/nUFFbWNrCxvk601YdZUjB/JuN7VJn%2bwm8OdmgV4XtJCr97F9V/f4x8IY8lmjz/5kssr6yJG/Bkbu/sSs4TJEwTBbA5CzKSlCoaSuUqMbRTQf44zRDnBly2Zi0OCv9uVOH3cPRQxxxFGJwuI1CXyYWWwZXsEfIUnhRWokd1SgZVLJAUJfRtrC3j6dOnmJycQmAvKP6qkHVcYdPmzIwTFH4On2Pz59YCYONa1Z3L7r2oaKI4DveH3djDlWDulPJBJdy5As0azxwPfPD6uMJKVvv8PqaiSgHdto7/vBXA7EcROS4QBzk8eiUWuL8flDT2FTHRE6LhsegJZXHH8l3vMpxwX2N3UvjjlOSpDwzsnj4//2o3jiLKBXqkgIn3wlh5ELdSWrLEINFtTlpmZmYolbVyEW6PDkOUyGzR77Vz4faiEMwKGOQgPHiuC3h4JjhJOAiFJEbyPicJdynyPsrP2boGE6rrFDjNC/KEYRzknALYBbhD7BMsvH8bop43%2bExVpQmHw4I3ggGdNkoP/oXSfx9YDJF4By%2beUFWcGO0n4gnaP5bfH59YiuRQZhjmpUoYHLhq2frYKjyKVKjCoW70qWWfjOhjf3G5jCGyuF3AaDWRe/9dVCYeWnkIRaANot3b5AJTU5PY2d3FISlsnXjJwtIyguQKM9Mv4N/eHlqXHGYBgy1bAOOC5zZr7AP1EtmChPxcag/QIAqnZXlpKHxIsbuvAGGUFJZUQnSX3wWGKoBBgsnCxku/k4xqdvGw41qlcZ3CZ71ec8InfwdUBQp%2buWMBbQ216Uk01leszlXKYt4cjjlM58lN0%2bQOaWKJHJl4fRGX1OWbpaswO44CHBdQHfrbhx/j3j/vOzdGyceWfD5s08zNeBfIDIPO1A4rNlxkbuYAx2fKym2Zl83RAISTk7LjP/shsn/%2bveUCqSRekgtsbGzgEdFw/9Y2/LQ/O7%2bIQDCIxfk5TE7NSKSwSOv4CrDCYM1SgCxmotluDKSLFuMyhGqqsvMwsHEXIvvKGcLoXESEwy%2b/s78x/%2b%2bN7AKD6xau4wJ1doFhAxrlgcMKp8OSFaWJxid/RePTT%2bzBa4QNAXENldN/6U1hdatgJU40ETw7rKRGoy6dLZeImBVPpdNOBXuI1Y2jAMcFhvluiZIJBrAkITL7HyMvL5rkkJQm/0wRl98nKsmcnuvrofARdHPIyxQWfPBb1D/8wFIGpdpLC/NCbmTAWg/v/MGPTz6zMsxUPArfygrh0oq4wDqZ/7Z/k2j5cywsLgmYDlaYx13EeQYDhn63K9URjuQQy5TFX/OUsnJZjCltlX7MM8HAJqklKYHLZz1XUUNZiGP%2b/IHFdV6zZ1e9t1yidLnWPtdZBZy3FQnOEaHB0GXaoJIiJe8kgFDaRKttrSRzr%2b7iVFQdWyluV9JXFgszev2SFX9MUasQ7Q8sJc4JqlUHHBeOuthO9JwoweYvqTQJp7ndrhWN1Pv5Hfwu%2bbBzQUn80uU5BIJsBZ7Br739L77mmWMFYIYL4K4qP7vPGfkcjGLhTDpatxOUTs/Emx%2bV8KPPLNNORCOycIJN//HjCaytryN0EMTU82ks%2bFYQCh1Qbu%2bDf2cbz55OolStjw2GV7rAVaXxkTTNrW3ylXd%2bger7bzuLo7iqlEwmnNLUZrSDwwxneFaJW4qopCDmAFzsYAtjF%2bRCrGMB7ZaEUiu0jr5CxVqbUDnPBN0K2DxpYz6oIRDrYP2wDW9Aw2pYw8RmE9Fib6RFDe4ooE09geadsk28jePjY%2bH6gvCkkG6zAK1RFLw5pVyAXURVkvkexhuetRrtc6uIFC/s5sVcw1L6i6RiEyz5LnCRAqotA9lyD7mqjtO6jlyFhI4PkuTrXXPkirCq%2bMr/EOzZ5qu8JFeW3ZTKlBTlUY3fQznxiHChjlAwAO/sLGZJHj78HF6vV75QPX/xAhMPH%2bHZ1BQWF%2bbwv4kvMT8zBe/corBE/tI0SoFGVaTq9SG5wLjhZDQFkPAndfmsbpkh01heI%2bQUS4qvUC5EZB1SPpcluhun7DGCPWJ%2biURS7lUZJWeC8XhMCiQJavl7JWe16llXCd/Hz6udjwJXr7kxRoy7bg4g7kL83qhWnGNGcDZjp1CqQ0S31yNggGartHcw2VJfjsZZnid/5KB3c6T5PzWHWN4fVOibAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"659\" alt=\"alt text\" data-srcset=\"/assets/static/1.53ad8ab.47cdc2400973217f474bfe329ca8cc72.png 659w\" data-sizes=\"(max-width: 659px) 100vw, 659px\" data-src=\"/assets/static/1.53ad8ab.47cdc2400973217f474bfe329ca8cc72.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/1.53ad8ab.47cdc2400973217f474bfe329ca8cc72.png\" width=\"659\" alt=\"alt text\"></noscript></p>\n<p>You will be greeted with a page similar to this one where we can begin configuring hashcat.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1719 966' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9bbc1d23a5a3c369ad9dd88aba6135cb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9bbc1d23a5a3c369ad9dd88aba6135cb)' width='1719' height='966' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsTAAALEwEAmpwYAAAB0UlEQVR42u2Z3W6CQBCFeWPv%2blJNetnGa5M%2bQ03qBYhQBfkrvwqczlmlbUztXVNaZpKTdRd2Zb4zuyZidYUDhI8omhybwMPaWcO2bbiuC9/z0DQH9H2Pr%2bLa%2bG/E8CzH4xHb7Vaeu0FRFGjbFlVVoSyL01hZoUj2eLi7RRilsLrkCb17jyyNsA0CbDYb%2bL4PV1p%2bjuMYO1kwThKkaWq03%2b9Ry2LDF49FjLqusVwuzXO/SB40kEB830OWZQjDCGt7idnNDM%2b2B6uVeZ1MLIvSTCqFUJZm0pZmMYoT2R%2bU5zkOh1NldF03Kn1UZW8cp/tD1HWFRvJpOwF2vsfK81cZrHCQm%2bkuSyYRt5uzw9%2bV3Bg1gDiKQWEYIopiYxbFyo3jyJjI/GiuxT3DCUyaThMA%2b2w5ideHdtBlf6wyIKRlssyPZ5vjOPDkbOM4W4vJMObzORaLhSkZbgVO%2bOtiHqG4TudZDVQQ7ESBubZarbgF8vcTkxXA/n8S87oUx1n%2brAaLjg9VMLUwW2DMB9pPHpQM/sxbnwemBOEqgCmEAlAACkABKAAFoAAUgAJQAApAASgABTBhAHz/MWkA/G9w0gD4fkABKAAFoAAUgAJQANMEwJfBb1RQqN/bVf0WAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1719\" alt=\"alt text\" data-srcset=\"/assets/static/2.82a2fbd.258315e61624e6f513fb22442214e205.png 480w, /assets/static/2.cbab2cf.258315e61624e6f513fb22442214e205.png 1024w, /assets/static/2.30c4703.258315e61624e6f513fb22442214e205.png 1719w\" data-sizes=\"(max-width: 1719px) 100vw, 1719px\" data-src=\"/assets/static/2.30c4703.258315e61624e6f513fb22442214e205.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/2.30c4703.258315e61624e6f513fb22442214e205.png\" width=\"1719\" alt=\"alt text\"></noscript></p>\n<p>From here we need to ensure we select a GPU workspace and install hashcat.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 513 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a7cc445b78f273c730f3901a9bf4e485'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a7cc445b78f273c730f3901a9bf4e485)' width='513' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAIAAABZ6yszAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAKmUlEQVR42u1aWXPjxhHWr1znyZXyU6qyec8PyGuq8uI45dqkYjtr7%2bFdeSXtpZOkeIiHSIInSIAkLoI3KV4ACRJgvsEQFCVrV9RaVLRVaamAATAzmG/m657uBjeqVXU2m1nmFAecnONcLPpPZHal0AcfqbBu2VAUxQZgzqZDMvRJn4zHftabTNjy05mh1OtNtVqt1huqLLB5Xi2Xx8akWhZLktpqts46neFQ6/d6jVpFqdRpv%2bPxuNPpTCaTtQMolwkAg/uXmfijlf/LNPr7aeH7qf3ssJz7w49/b5ai8Whk%2b9XmDz9vvdt%2b9t1PLx99%2b/WLn5//8P2/3x76XYcHL54/23y1tfVqc3dn85tH3w1GBtr2%2b32e5zVNW6zS2gCotdmk1//lC6vPmadfWD1u8MsDU%2b/g2WCsxQWjNZx1282KqnbOuq1mvVZv1qpqpVIRRbHbGxSLfDKZyLFspVbrtJt8oTg1CQMNw%2bj2ujhOjMnEPtmlibUkpsNV59pcQLU%2bIJcf2BSSyftSf7NSf5rE/jzY/p0e%2bSvtY/VpuFR3Op2ORiMUTIzJtAVjtWaAQO%2bv1qd1/ZuWdMCwRlVrapg9xTIJcccjPZlkggF/oSjiUigVUpmMz%2bcT5TIupRIfiUSTabYkCLjsNiuZbI4rFHK5HMPEu0Nt0OuisiwrLJs9PT3N5/M5Ntdqd7AS2XSay%2bOPizPxgabPTIPnSefxaFiUiUXRNY1jU3Kl3mq1JUmq1%2bu1aoX8qeoZWNBq1WypqtC4xoYiK44VolZnRq3QaKQXCrzXtRc%2bTeCyVOD8gcDRkVuSyIqVuKzX43F5vN5ACJedqhwOhw7dPvexNxGP9TR90O/7vMduz/FJIOAP%2bIPBkOvwUCmrmFdREIK%2bY6/P5/Z4qvXmbDbJsjn0dLi77Y8kSW/NRjQSTLEcy%2bbj8Vg4FEKfaBEKBtk8l0gkTk4CCSYeDga5krQhlcmAwM7pdEKPU0cWTMN90yYohD4yzanDSdO%2bNB2OkhkY6bpuU8UxsufUGg6HtL7NK9IbUQzTssdgjA0DdzRdhw3odYmQQr8/GJAjzrjTs4Xc7/V0XduQFYnqHCWujWFqa5S5wEDZbDiPyAgW2By0E0dQtsfvALAVb4EQhckFOW%2b7mLhF5SV1t0fhFOl0wMRh2A6FLDoHZKZRaDaboFCz0SiXK41GA1waDIeEnbrebrdHulYqFMDCkiBeaenR70JZQXrdKRvGeDQ2Ps1cYjqxtxD89gThFTgC7VyJsTR4JUWPS1hJTRsokuwPBN0e97t3b8uVKjGsgwEewZjw2fSxx/Nu90C3rb71YQAyz%2b7svHEd%2bwWhtPXyaTxbsNfzRiaOVG7WqynmlIknAqFogolB6TXNBoABgUz7%2b/vZbJZS5bdvLssAjJHeqNflsjoc9hVZ6g/1hZm/WZ/jUafTJtwfDGEhR%2bMxKHS%2bAiAG1At8wDIZv5Lx%2bIrbV1Ukgk7Q1er2/pMFAMAiZx9wdOBWtv3lFYBBrTeag8EQ6wzHqdmo1RpNzKM%2bHt%2boz/FodNZpn0F6/S459C/oADUvCyWmkBbG1LyhLKwQ0QEuu7W14zoO8AXu4P2b11vbXv/J7t4%2bXxJXdJPmOlCrJOLhVDJ7Eo7GY6fxRAILAGJcXgEKALMF3QCvAFhVVRQwJm01QU2YBBwdh9yCfYe7atrWA8Sz/wn/rnR5PuQ%2bwLxQW286EwrDiJWEN1pGM4wY715sWEAFX83lcm1vbwuCAFcaM6qvJqhpbzH6%2bthPcULTYBWJFUKpWCwCyYIDGHE4HP7yyy8fPHiwublJ4X0agIaqMIl0rd6AY5NKJSRJ5AsFeBOtTgcujiiIfLFYqapweGJMstlqLfOKFuBXlRVZVislvohprVTrsizBrZoDUJTywnpSJUYZqBiGefjw4VdffbW3twci6SvLJQCtiuL1eA9cxyVRCgUDWNVUhg14PZEY4z92vX%2b/e3Dk5vNZn89/6PG12u1fAxh0O3yeTcFhyrBsjk2mM7FYmCuUQEu4GFcAgMjAKEnAcHJyAjph0wVrR6sJavZtE3Fx1a/wkz%2biwZfc/w9RCHJBiaElFAlZ0FgsmUym02layNxEUB8Yrhzi%2bR1rfmk646SFD0GaLu2wc7vUbMIzPTejy1aImtTFxmTcROhGtlgBtcgdHLqZZEZW5EQ04nL7mHg05PP4g9HTWOwS6RdlBLrxGJNKMog34vFoNBRC5TQoxGYzbA6BiijJ9C0boAcwBINB0Aarf%2bsbWa/dymYyaTbf7rSyaaxpBmMoFrhcns9xPByDKwGcnXXA7WoVrmRdRtAoitVaTYUeCyVFrYhCEZEtdd42YHCAgeMQThUA6NYBrE8u7MR4H/XUb9%2bZG49gLuY8nkyoW/6xbeuKoJ4wXB/pxmQKF0wDdTRtfMmdXp8vpMCd3n5z5PbxBd59uPti89XWy196%2bvhGfkT/rJVOJ8IR5sTvzed4rlBkEsycQusGAD8Cngh2n6E2bDWb7U6nUW/cdJURtPUQVA4G1F1A59jC1rsCVJ3ovj6fSnMeFdJt50aylMCc90rd6TsCYDqR7tSc0gvzNws6Xy%2bAu7ZC6wOAKR85EZ2dfCDutLM3jpdjwI8FymRjNdDPyHZpdKK%2b5t0BoAEAHSdNKDhh6sjBRmp83IKT5Iu90dOWCAvuCMBnT6HbSq9fTPJZdwdgOjGwc85jBU3DfUokTbPv2iRaZfhgDmmFDZm0HFp3BoAmT%2bdp14lBbeDkPANrUkf4%2bsycbY6pVZ7YTf6vA6uuwDyz6xzPt1PHn6OX03sKYFkHsHcSkzoawZ0E%2b%2b28L0m00Kf3dQXIF1DLYe95VmfuZNgqceELwz00o5%2b3DrTrVa4gNFsNSRQVSW62Op3OWaVCvnNKsgxPu9FolNUyl2fL5XIVnvbKA7gjAK2KioD86OjgJODbf78bCEez2ezBwe6bnZ0jtxdRjsdzHAicuPa2EZe/3XcbpnWvKXRbeYM7NaMXv1TPLqZyV0ju/k8AgOmI%2buwviwMYTftbY3/5A6P9xK7Q76HQ688frS54BQEABbp1AOBJqVQqEinxHJdIMEVBhBKLoiRJYkko4SSUhHw%2bL5CbIsdxOMqS5LS6XgqFAjqB8V3XCmBAgiDIihI/jbx68eT7x0%2b/e/zTz8%2be/PPRo9dv32%2b%2bePHk%2bfMnP/7n%2bdNnj398/Gpr5%2bXLp99%2b8493%2b66yqqKheJ2gDka%2bRgB4AaYTR57Lp1KJeJxhEknfscfnP8nl8rFYLJFMpiDJlJ14TQcC3kAgRNbEbnitYBFkWV4jgG63C8fBzkFRr/k8e02d6uV0vDZ3q8e0yYqCV9yJGXV8B%2btSwclIL/9MwbqHZvSzdyXqZeVgbz/KEKJnU0zkNAbVzrPpGJNk2UwyzsQSqXQm3e31bxp83hGAs0Y9GjkNR5lcno34Xduv35VkNZOMhSKxZCqRjMeiTCqTybQ7Z/cUwKWwEMHk55aVWA7Dzn8/Yzq/NrKsT/3N5l0ltsj3bWJLYTjHuE9DM30eo5FkGy6HJN9/b525mbnIQFjWcmbXLpM74%2bvScncNYGzncJZc0SszXNaHP8lcLzP7M%2bu6AKBfuIptR1qOzMv2iZYXT9s3FDTBTozR/hdwZW%2bW/gPTkQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"513\" alt=\"alt text\" data-srcset=\"/assets/static/3.fa6d64b.687bcc60c1889290e16dc301c0866366.png 513w\" data-sizes=\"(max-width: 513px) 100vw, 513px\" data-src=\"/assets/static/3.fa6d64b.687bcc60c1889290e16dc301c0866366.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/3.fa6d64b.687bcc60c1889290e16dc301c0866366.png\" width=\"513\" alt=\"alt text\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 403 302' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3c00b4e55d10a95b7d3fa50d12a8daa5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3c00b4e55d10a95b7d3fa50d12a8daa5)' width='403' height='302' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAYAAAChS3wfAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKBklEQVR42uVaV1dbSRL233M%2bzg/O2a9zZh%2b8D7vrs549tgGPE/YwXhtMGDAmCSEkBJgchBA5CSwJhLKQQBFlvq1qIZJlD9hDMHvPaVp09%2b1QXfXV13X7wM2bN3Hjxg3cunULt2/fFvl%2bT7zO1LoP8B9OFy5cwJkzZ1bS6dOn911Kre3s2bO4cuVKUgAsifPnzyMnJwc9PT1obW1FW1vbvk3t7e0i3b17F5cuXUoK4NSpU9BoNPh/ep4/f45z584lTeDkyZNCKvxEIhHE4/F9m2KxmFhnVlaWMIUD169fx/Hjx1cEwI34SSQSIi0tLYm09vdW0sZ%2b0iV%2bUvl2PmvHy8zMFHggBHDs2DFhHykB7MRkNk5sp8ZJjfXo0SMBjAeuXbuGo0ePrgggpSIDfWqMjI7DarXDHwhgqL8PVocb0aAPTc0t8AZC8C7MI0wmE6D60cEB6KaN4l2v10OmFEVoMVnOwNrbP4hZk5naBuGjepd7ntp5EYsndkUDWACMfUIAR44cWRFANJoUQNHbbPz008/IzHqBd7mv8Z/7D5CVmYUHv/wLv2Q8Q8bDB3j7LheZGY9RVFiAv//tZ/zjfga9H0X2k0xkZ7/AP%2b/dw%2bOHj5CRkYGXr9/gydNf8Sz7d2S/eI78gjzcu/dvDGsNKya3kwJ4%2bPBhegHEYowBS5icGEFDvRIVFRIoFAqq70B1VSXkMhmkMjkqK6tQV6eArFaOOoUcUkk1JFIZvD4/5NIqVFdXo0IihaZHhZbmZnqnFo1Nzejq7Eb208f47fcclJZVYEo/u2sCYPD/TAACA7bZnrVjw9DNmHYVA74qgFTjtQi%2bEck3lou2axD9S8i/dqdTbXYDAzYlgO1IbF4bXeMeFUBieaJrJry8y2k5wpq2qxqQWGm707v9fRiwjRPcrcVvTQOojU47holJLSy2OTjsFuHHzSYj7M45WM1mmC0WzM3NYXFxEWb63%2bmwweZ0wzLzCWPjYzCabJhzOqCdnIJep4PJbIGH/P5G89qbIEjkpF/VSfS4Ab%2b%2byEODXIqSDxWo%2bFCMcokEr569gkwpR319PcZGh8m/v4KqrRHKli68z38NiaQMb4sq0PaxDk%2bf/4aP9XLkl5TD5nAsj7G0DIJ7FAPWonUgsLh8SAoJkhSJhOEjX8%2bMMRQKIRIOC0bHmhAIBhEkVhimskBwEbFoBG5ifE6nEzabnd6JpjWFPacBqem45pxEWV0wzs4KghMOh7Y8qMvlgo5MQK/Xkcm4RNngYAyPH4dQWxv9bGJ7xgtw3trSTEywDEplPZqaWmgRhi3vmNvtRg%2bxwYGBAdImDxgGCgvDZCYRvHwZQn9/bJ1Z7BkNYE6vm5pE/%2bAwAn4fJrUTcMy5RTmrPqv515IwDzooMUCOjIxgdHSUhOEkUwGqqiJoaYmiuDiCqan4Ch7sKQ2Yn5/HwsIC/H4/mYEbHo8H85Qz8m82sfpbrVZMT0%2bT9uipP4/o22KJo7Q0QloRWweG2x0z2BM8YDf5w5Y0wEU%2bnBE8Ti6RVZpjAl7PAhYIFL3%2boDCFIKE%2bxwJY1VlTvD6f%2bB0lsPR4fSImsEBaw5o0P7%2bAxWBAeAqPh%2bqiS8KDcDwhFKL%2bCWS9Xr8YP0zm46O%2bFkNsTpGd1YBUQMRhs2Kgr0cEMbq6VVDU1WNKO44p8vtNLW0YGZ3A%2bNgYNCoVhkbG0N7RRaSHSNBQPwbVKvSPa6l%2bQtRbrBYMDY1ioLeLjsOdaGrtojKH6K%2b9tQMDVKfqpHxgAtM6Lbq7uqDRqKnfAXT29K/MacdMQOQ0aJB2LEp%2b32q1CQ2I0a5HliNA7Pd5d0KUMy/wCTcZJh7gFxEh3j3mBAyGiUSctMdL7/lpp32kAQvw%2bb2kNUHx3qLow0fjLYr3WVuCi/zbRy7YjNS6dwUDWLX9Pi9NKCTMYbW3zQ8cW44yrSuL7VEMSKmbdnxEILe6bxA9Xe3QUK43GKEdGcJQby9Uqh70qDVQq9WE8jMYp/IulQZjw8OYMXyCursDKnU3OlVqOlN8wugIqTn1oybzcDg80I7FUasMITd/Ebl5QTTWh6HuiaCwJISid0HIakIoryYMiCb%2bMrK0JRNw2m2C/TmJvbGqB0hFvQRsjA0ecpEO4vVWGx2AKDFYOih30EHJRubCqu502MWBic2HD0HsEplZslv0%2bwOEBXGUlYfJHYYhlUXQ3RklrImiuTmKGlp4Y2MEDY1RxBJLO%2b8F9pob/Kvm880CEC8m1gc3EmkCIBuDJAx%2bn5el2i8J%2bruaEmnKtisqtUkmaDKZxEluewMkeywgktqlgoIC8bU4Ly9PCIM/ctjsdkF%2b2HU5CCMifDwm18fH5GDAC6drgUZJJMticViNBsyR%2b%2bN6HthH3oQpNe90OBSEez5JjZMYMSdCaPzhhDUnSu6W3SpNGR4iUlwepeN1iMZnXuF0OIWrjNGGsStm8PbMu8n9RjBH%2bMNei8t4LkzLN60B3IB9d11dnfi/k4gLH2MnJ8YIsD6gUV6NNwXFkFeXYkhrQHuDHBJ5A5TSUrzMyUNHlxpjo/3UtgI5T7IwTEfhRkUd6pRNKPzjHSrLP0AqlaNaWoGWdhXampQopLalua9RVqPA%2b5IicXaokSlQnPcasjoFPkhkkJTkUn0DeokwSWUyFL/JQ42iFp2aEfS21eF9ZQ0qSwvxrqgMRfkFqJLLoZCUokyqxH/fvIbN4Vr3/eFPMaCkpEQIIT8/n0iLH0EiLoaZGfE5zDBjxJzThnnaXZvZiBkiK%2bbZaej008IjuF1OWoQRs9MG%2bGjHOITGrlKvm8IwMcUp/QwMBoPo12KaJW9BHsRiwozJSl7ELEjXLPWp/6SFkZio1WaH2z6Lj81t0On0QmPM1J/JYobd6Ybf44KexrPS/9PGWZhmZ2lOlJMGGoxmGI0zRMFDmxdA6mHWtxcPRjviBTaGrD7/GLIe/dN7gfRt/qzua%2bVf%2buz%2bpTHSvftNH0a%2bxx%2bLPpYhP9lfkktvpruN43/PXLYkgN1W0c3683R5%2bvSDCCBtxDjNOSCdBqQz2x9KA9YugrkAn0HWPknOERWBlnW7u0F4scR6QYSj38AEd88Ekr97%2bTTZ2weppAo1VeUoKC4jN9iC8vfF5J6VcHnDSUGlBLac68xxfByOomEwivaJGCTdETQPr4bfEz%2bGAJYw2Kemk2EznQyrICdSU/BHKVra2qGQ1UCpkEMzPLn6iX2NBtjdcUhUEXwkAbSNRoUwNFOxlTZfFADf40nFA7br0/jm0ur5n9V9fRAlJhbM5ZzSvp9ILXI1xeJLy5HnxDoitHJFhi9JdXR07PrX2518%2bN7SigD4nmCK%2b6fiffs5McO9f/9%2b8p7g1atXxV1hvjzMt6g55zu0%2bzXxht%2b5c0dcDr948WJSAFzB92ZZEw4fPoxDhw7h4MGD%2by7xuhjvTpw4ITb98uXL%2bB/cVjU06prqlgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"403\" alt=\"alt text\" data-srcset=\"/assets/static/4.f06c317.a81e3e510cb43fa3d38e97bbd0645ed6.png 403w\" data-sizes=\"(max-width: 403px) 100vw, 403px\" data-src=\"/assets/static/4.f06c317.a81e3e510cb43fa3d38e97bbd0645ed6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/4.f06c317.a81e3e510cb43fa3d38e97bbd0645ed6.png\" width=\"403\" alt=\"alt text\"></noscript></p>\n<p>To install hashcat we must issue the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">! apt-get install cmake build-essential -y &amp;&amp; apt install checkinstall git -y &amp;&amp; git clone https://github.com/hashcat/hashcat.git &amp;&amp; cd hashcat &amp;&amp; git submodule update --init &amp;&amp; make &amp;&amp; make install</span></span></code></pre>\n<p>Click the Play Button and wait for the command to complete.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1375 811' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1168e98e6d58b342c1416b723001016b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1168e98e6d58b342c1416b723001016b)' width='1375' height='811' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAmCAYAAAB0xJ2ZAAAACXBIWXMAAAsTAAALEwEAmpwYAAAIKklEQVR42t2ae3faSBLF89V3Plv%2b3dnxzCTYGDuAhB4IBJiXefbeX3W3wI49OZm1N2Q4p49aUutRr1u3SnyYTCau3%2b%2b75WLp1utHjXUzVqvVk30bduzRPT6e1jKP46v1r4zXron7m83myZrz/TjfbNjfPDnX3CvOX3kvv37tPnz8%2bNH98su/3GTy4AaDXMrouSRJXDUcurv7e5dlmcsGA9fpdFyaDlya9Gzb6dy6L1%2b%2buG6368bjsV%2bn0e32XFkU7va2o/sNbHAt6%2b7v7mw/SfquGo1dnucu1zUYYKjn2fk0da3rtrvTnPu3223Xvrlp5q3Pn93NTduef91qae21nbvXu3KPVNdzD57PM4uitH3eDbludC/unWUD236o69ouenh40OLChGGMqsqVuuFiPnej0cjOo%2blCL71YLNxut3Pb7da2zTjb374w/2r9C8ewDM96fczcLMxns9Pxud7z1fs%2be5fz9/nAA/lNFQpoDIugCNOqBtpDAWVZ2oNZz8X/lF%2bjgNl06nq9noTPzZUGg9RNdCzPsxAGmRvJM47Ho1mhkoccDkfbjyP%2bvnXsksZJAbOZKWA4LC1OCYssL9zDzAuLJ/RCrA7LoYUCMTzVeY6Zh2g%2blreAHygMT8I9/%2bp3rqQf6gEI2uncOTCBgeX7Ag0EQxCU0OtJAdqy39ec0AAvOFeWhSkNJWYWRqUps6pO%2bEHobLYetTeKvyj8j1RCo4DlchlivTAcwKoAIQidSLBoYQCQdSOhOCm0GlZupWtRAsqYSHlThY4BlNZzX47jLSjCPEhjHMLpYhSwlVV4cYRHGNw4FQ6QOhCYc4fDwXLofr%2b38Ra/iwkB0h2ubflSeX4ULEp%2bJSTIEqmw4e721rwBQCT1YGWUM58vbBtTEpbnunHwCJT3EghdVAj0el0TMgmxP5R7V5UHuHEQmJAgHR700htda0oIAhMe3I85W0KEsGHNubCXIPhXCiB2mzQogSMPgDERAgAagkYS8Td8/bI94CGkwYj4pEIsmAeKGwkRrhx5gH/v41fWfc4BfgoMIMZL5fdaro7Lp2niCm3h9aB2n/QmJAcc%2b/3Ec4DpxBSBoiaWOnNLhUaptR8B8zn9jOOiPGCuuI45H%2bsjTMz3ECAUAajN534dygIXSuX7eQDQoeGGPz6ZTE2pnHspDY4uLQ1iKdA6ixxA7g4ZAhARgHN7uT/rv8fFf5oQgMKWwTpYN1qzpwIJZVAroAgKpjQQI1CfsVytrHfgKzSRpeXi1bR3sSBITBoBMlpb%2blo6L6woYh8MiFQXmhtZ4VLDUqGEBwdm05nNUcBLhdHFpkEAywogxX9sLNDcoEFS1xMDsFmgtj%2bLe38nBuxMaGI%2bl%2bW3oTmxDO78LeF%2bBnf/JhUm9kH7PMuN%2bBD7gzOP6CepufnYiiFfH4DunKc83n6DIF2iRzQK4OUQiljvKc%2bnoQiKTJCMQG/PSBFKoScgZdFjQzmEB2Vuk%2bcpfc%2balZfqCScMEIoT/whF09N6bSppU6w%2b9cyvkNC2rxxvnWENBK9DvodENZlA4IhXWOEkBR7fqDP0HEjfrhaY1Kr8vpggVZUL%2bKgGGaWrRkMJVksQhUcupldmwoxHWZoW%2bVIAuT01PIIXcN/9/qAye2sYwrHlaun%2b1/d%2ba895UgvQ%2bJjUc9ftzSToXAXRWGMil6ft9SjvWAsjlgoDeUa6kMJqra1833DgQwWanIb2WbQ%2bqZROEuGFt5BxfOW40XOnTRXJNvIJS7HKOJtwfLGYm3HezQNw20FGwbN2v105xfbBtdvOXf12dNfXR/f50979%2bu%2b9u7k%2buFbr6K6uDu4/vx5VMToTFAUQJlSRaejDp4FF0s%2bfKowICeacBzzpy/ONACXVtafL3Id7ZIPUuk5RiRCyxWL5jgoQog8AvGrpWhLy7m7vbm/37tOnncBP87bmf%2b5l9dPxP37fyQP29pKxk2RMMXwQYZAxAE%2bKo/M1YwkM3vi22rABV7IQ2QUmisUhXhFI3zUEKFy8AlbuTwnabu/kBTsTui3hW62drL6TIvxx1vx%2btZcwR58Gw0cVs6LuA2Di%2bjRQEDBa14qsvLA0S8hRXI3GI1NMorUoCWVxjXkNneUz13/HEJjay2YZ9LfSVrGbUh3WsrAfvW6ulxRN7hV68Y1ccqc49WVu/J4H2LF9nu6eo/nh4PuKzPeBaAGWsd94DPtxvFcKPYHgw8x/1ysLDaWvIrpkrhisZI1a%2b4kUkpn1AD66R1BlXBaAS5QiaaPhzlEhCBOzgLXDNV5ilj%2bKVp96gkJakDu3pkcVGqS5NUHI%2bQhAXMIDACfYIq46NPfObK31D/pJwyAJgdgg6UlRA8sUlSnheznBeynhLA1OjQfEWCUVAUj%2ba1FlqQhQivUCykgkrC%2bfC2uUrtcr8wbGSh5AHTG0WNYx3T8%2b6yKZIGkQdB4GRAa9%2bRKE9eJnsHH4ElSLNBljTJKGBlvPIHw8xf1plx1fceX3ALM3aInNlH%2b75vI0QEFla4hQ/8vaWDfm6K6O5UEppDhaZeRp5ngHuR1AxeWxPsrxzHD/txqn/6eu8NQEiPnbfy3uNn%2bA8KDnO8aFAePIN0GTNHxDGDYfRBCUzMD%2b2kJhafsezZ92ki9IATOzWhTMh4K3Mh4wtsrQExlorc/3mSmIY3gHQHk4HhrkfwXP3SVVxU/SYAdqKvePFBYygoD0CuHo1i5PkvAHinutqUOHuDSF1NYSm5oHVaMq9A2X1mzxFj8%2b215YQ8RYW4h9mCE0lXb5JMzN0rK6b4ZMmn%2bLnMiN3z7v%2bV9yR%2bi/ZRb5nQvsg5MAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1375\" alt=\"alt text\" data-srcset=\"/assets/static/5.82a2fbd.3ed47ba2b12e5ff7ee89a28283510edf.png 480w, /assets/static/5.cbab2cf.3ed47ba2b12e5ff7ee89a28283510edf.png 1024w, /assets/static/5.099ddcc.3ed47ba2b12e5ff7ee89a28283510edf.png 1375w\" data-sizes=\"(max-width: 1375px) 100vw, 1375px\" data-src=\"/assets/static/5.099ddcc.3ed47ba2b12e5ff7ee89a28283510edf.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/5.099ddcc.3ed47ba2b12e5ff7ee89a28283510edf.png\" width=\"1375\" alt=\"alt text\"></noscript></p>\n<p>From here we can do a number of things. We can benchmark hashcat, we can mount our Google Drive to import hashes from there. We can do whatever. I will show some basic stuff with MD5 hash because that is fast to test :-D.</p>\n<p>First, let's run a benchmark of NTLM and see what we've got going on here:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">! hashcat --benchmark -m 1000 -O</span></span></code></pre>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 739 699' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-08032e6c26ef8a94be6899e132da83b6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-08032e6c26ef8a94be6899e132da83b6)' width='739' height='699' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA9CAYAAAAd1W/BAAAACXBIWXMAAAsTAAALEwEAmpwYAAAP1klEQVR42t1bZ3PcRhLlf/PP9Ydzuco/4M5XPlkiJYbNCZtzBLBYxO17r2cALimSImXKorxVUwAmT4fX3TOzZ/v9XpIkEd/3JQgCiaJQwvDhFIWPl31eN9IUvqDN90hn1WpVfvvtN6lUKrLbueLvAyFRDoeDEoVPEoaJ36d5rMdO%2bDQpMO32vri%2bpykvy/t4a%2bns119/lZ9%2b%2bkl%2b%2beVfEu4Tmc58KZeu5I8//icfPpzLx4sLufh4Ka7rynA4QN4Hef/%2bT7m%2bvpHf//O7vHv3Tt79%2bV4Gw5H0e12pVWsy3s7lvNeQ8rgrW3crNRB3vlxBuiIdlER6K%2bmMnP/555%2blVCqJ53k6we12K%2bv1Wp%2bbDZ%2b7YuK73Q7fm6LOarVCnY223UM6dqjrWQnwqFZowzLf3xdS8xRHHiqnZH0zCYjjWPgjDiRpKq/6Ox5fta8jUpZlr5rOyNXz83MjnuBYpVyWZqMhzWZLGnguILqeu5N2uy2T6VRmsynUBE%2b8T5EG/a7U6025ublBKqEe2tWr0nG6EoGo%2bt1sSrfbhZoMpVGryhJ9Tidjmc/Yvi/1ZkM6HUcqpRup1mqoU5PRZCajQV9arZaUyhXFpjA8YNLHV%2bXRGRfOQaIolgwSsFwuVMR3u60%2bDaIbMd7vfas7FJ%2b9puViLq5HcfdULXzf03zPc1Wq%2bKSKGPAMtD7rHdieAIn8NdSMqrXDc7lc6rgB6vpoy7pUM86T0poT4Ggl4q%2bmM/kBf0dVraN9SvH8KgnI9Yq/LCWXHFB6CYqPkYZ4n%2bM5xXOhKctCmzeQNHVt3QnSCBzfShTP8FwhH8%2bYz6n2laQepKlv2060nelrifwB2ux0nDQNtG0Ydm29hbY5HjOFFPPMLAezO0T4GkKcnVIwTdYQ3xIG7kl4aOG9CoK0MJmeLjjY31giNZEaumAuMAjqqNPC90b2QRlEmKJ9A3mOhOwLzzSFbxG20U8fbdsgzlL7itB3cKhpOeuxjzie6Bgh6%2bvYfUmzw5MScZ8Qmu59PyQtdwiQT4iTyDJfF5mCc2m6UWIYjk91MkmysASYW0mZKkc5WS7kQA6GfeUk25m8thKEEsFFkrssZzv2H6ItCR0eOioZiTKkgvECEGyq3%2bwzCGrankxiXkEIOX5uhe4t/MsEiAZKAMMRM5EU3xEGzLDwVMt81FnqwnJx56JM/sJ%2bT6z4j7Qu6%2bWEMnWWSlzmGcIa1TH1Rkoclsfol%2bMejxGeUaFSJDz7SdPd52qBesdjUiwyy%2bJHseKuCqRbFWGKfRSPtZMDiBBCZA/gkOF2DybpSkWeYn4AZynCJNrhUFep4ZPlBOwY/fj%2bhRLwiIkcwFFVIXCe/emY%2b0tw2dcx9lAzjhfsr8HpskrHHu%2bu%2b2%2bM01IJ1TEgTeS%2b739AvRutwzEDVc2VSpzvf4SVYbpUQn1RAliJQJVmnoqm0cW2lYS5Ji6u0FMMkou84UzPAljP4sbQqoCnbdmPgicmzvb5RE09R0U6b3vbT1vHM3V7Ski%2bk4i5FBlpcYu%2b2JaJEmOkJ0FKn6sCI9V/TjzEINQ3A05G5A/kNggVKec7Ko6cDBdmgHFj2ioGOCpNBu1nWs4JZuhHLQMWQh0nV6n3gUpf21qQubYlwfl9PMYGkEHwLNtrX8YqHaw6rCEFJQXgSLFk/NliH1WBv2pL367D8EIrcFSRCZXTBDS%2bGxGKVQIoRvxWE5YZUDL1AmstfC03KVCJyhSQYgOgRZ190U5VK1naNugT4Fu0R6L4mu9QJc/0uy9E%2b3S%2b7N%2bsJz0Bxacdps9UIFU7XwUIlVRnKZZcPMEpBupmqadqoSKI/BiiT9GjqO6Da/UV1CIkdH/fqzVge9ZnX/QzqEZGrbaqPgQr4/BM0dcnuM/vra/R1AWbvD8BvtdWvIdW7aY6X2NJfB3r%2bKT3KC9TgYfyyD3j2PiK4Bw0tOBnzOKyALHILjI3lbQIBkwn1itc6DvHMSZxYC3NWPvg4g32BLrIxHqgpu3UmutdAY4ZJC1WD9b0k1gvlXMtnKSnJOBuoJB99m0IcLAIPLdA1VBJMZZiYs3alSJ6rEC31TI1rZHxKGnuKA10anKQ5ELJ5QNBl14oJIoTV8cLIh8BVM1YXdtfvUB/k28IRqvh0TSi3BCrq4R6kgAvAUFKAF1f338Hzg91wbTZe/8KE%2bmoT0AsOcAmkxAefIBQJ2NMotH3oFCD0Nr13PMziH9Um%2b66/1UP0dj4jhKU04x0sQdrpSoY/8oS8vCFAOoLsUAOegZU3AKsDAiuLTAdrF6vVWzNpI2Nj/F%2b6yGudXGUAIrpXY9xZz2/jRLGiOneeoRz62LPlFi3eWsrDa71GLcnnufEqoNrJTc98Q7vBUxPEyAwQQuAipQlh8gB43FdKMfpIwRWTHVSyFM/XuuWtIwRYZpQMi5VTA0xjHSYAKuh9pyEoCj7/rld5Fz78PxPVq0c6HWkAMzx%2baTa5I5TDEJwzvRdDIaMXxcEH1MBA4KeXVjfRG1YkPHYNvptHKGehrnkkuH0wIbZRvfJOeYdCy%2b0awGyq66u8fJMiBwpsE5sdNmzXufUjgdioR8TjPWsxzkswDSBmr4ABLMH0tGKFU0l9DdoFChrJoPgJZpa0dwY747BkCI3I7iBxvzGEkBdDo71%2bKbGM8xiE0rD3DEOUAJhEepzKJcP1uXu6lhGAnpKNAN8jg3WIiUoMeOg7vmskI5XA0GENxKlAK7oSpIjAEvgN0QAohDIH/cU3EQSiVFH/YKoDFGFOUwxmQSRZrZAOQAsrOnmi3KbiK7Ey0EwVUvjun9ofwRTlQAFwUwtgkar6j5XVNVeBQRTHnLMZuJPp%2bKNx7Kfw8ytEHhstprvTaYoG8t20MJ7W9xxX/zFULxZR7Yj6LYLYIt2KBvIDuUHbygunt4UkdlyiLo9vHfFn0GUfViD4956h54F4Dx4ySwebW35redI4jDPeIG%2bBeOdLY8e3ft7licY%2b56sG3VZlCuyqjdkhXd30JeN05VltSLzUkk2vZ4sKlVZ1Royufgoi1IZ9dqybmGRc6B2lMi62ZB1B7oXxLJtd2T07r3MyzXZ9YaydUz7yA8Kf/3V9wuPz98v/K7BkNHJ46vt8H7NJum9YCgDaMW6na0HB2lqt6Jt/kkZD0r1MAV5aZLcnUiWmZS/38m/zXsLUegdAuyhAtVKRS6vLmU2m0un05SbawQg6VGm49FJ2UJWi5me962WC9ls3Vfbq/%2b7iXKHAOTqHMA3n89kOp1hoTNZLBZ6WMEnE8tJnPybdXau9%2bDG43MXa5K8DQJMgP6LxVJPY5ZYIJ9csBJmZogyZz6IQsLwiGy7c792v%2bLZ5upvIcAhoFMRgQhDGQ6HslmvZTqb6Zlcq9XWk944CqXX6yshxuOxHnl1Wk1pNpp6FujzGH0w0PY8Lh%2bNp1CXOdo3tb67Xcvl5RWIBtcV/TmdjpTLJWk04BkmyfeVgDRNFPRWq6VynNynKvBMkAeaPAPkDRKWTfWgdKZnhtvNRo/KwyjSs8P1aq1Hz%2bZY3D85Ut/pueEE/oTr%2bQqgbMf%2beDkjTdMHVSXLsm%2bGJ//oPcHnrOmOBISHANyZKOf5zE97Kc75JYnpdKIYsJgbPKDK7C2Xedo7Hk/0JglxYbfdah/5NRmC6wzc3utdpEglhBiytuMppqDPPaRkOBzBDCda1oXKLQnMkJz5YqVStJgbfKJksg5xKz9J5vNFElBgAESdps6Bt9eF9zfXQZZSq9dUREmATruF74YM%2bj3FgiA4YKEbWcAccmKDwQh4UJMZJ7Rh/hI%2b/U4JNJmMpQ98IAH4Y34PY/X7fWDFSInX6zp6HafdcRB5JUrwNuYyBS5xzG5/qEwZj0ZoNxAHZePRUHp4nysujUCoSXE340UEoAT0ugAudD4YmAH7mCAlYICJs4xPlhHoRsjXiw/2m%2bVcoJlcr1hcD2DY6xqC8UJE13HgY3RMW3yzT9bjeOyH%2bXwSINmHjmnraXvbjmVd26fOD%2b99Wz/NvkICYt4SgaiSM4FaBHvlDfkEK70npHeIdsUtMpbTJLI8jhP9dl1PL1zorZODuYtDr5EAG1tv8vT7sfTceg%2b1%2bzoVCMxVN6fTkmq1JkNeX2k0FMHLCHrG0FfW4U2wBgIeXqGh3jYRNNXr3OWJ9dpLqVyWEuqfX1zo%2b2q9ftsgeL9yfmGCZik3TXl%2bbmJM2V2fPivMWGautNi44VsEPa9sBr%2b9C/pWzewdFdiuV/DSLhW0GrW6lG/goTVbirQ0WU7b3PbiDbA2VKDeaCmnmZd7evQYu10eoe8fvL3xpgnA22BE9pn1%2bfnORc2tzaV5oQdI95hIz3fa3IGtt4CNpymjTX%2bIAG9eAvJgSBcJF3hZRH8zzVvM59YNNmUL%2b84yOjl0ThghklB0dX84AoQMdmDKCHA0cerE7DZA8Y06O0R8SgLN3nxpHB3meTB7G31fwKGZqGeWOzsP7cS%2bWQLEMY%2b0Qn2SkzXgACNDx%2bmps%2bHAgRmDu5SCrnVyuvDc6ANQCpxOWzFgBM9svdn%2bOBLwrQDqRwiwPpMA%2buw%2bEH%2bjgZCvIMcwl14iyyjq9P91Cw2xA4Mi1s1F/tRX%2bOFUwMMC%2bf%2bABjy7T5%2bu9NLy9c21TAFuDJSoAm2IOXGA7iYvTdcqZfX2JgDDx7bBXmO/8Pba3/P7f44Z/moVeEn9x%2bo%2bdInpqbrP7eeh/Gcej6e394btfXruAD21VrZlAMLgiE4R21CVUrulntr/IHC3ieWsz%2bDo1L2mNKUn/1XIx8635O8vhP2cBkrmek9a3ChP7XteP%2b/7iydDnruV8w/vpQzRvymVNBavlG/E9R/6m0uoUWOUpLpPyJC50%2b7o/oEHH2Aw6Mvlxwtxun34BK7G6eVKBXixQVlPSvAyy5WaBlcaxiIUZnBVq9c1nOWmCgMxz3X1On%2b9UpLrclWGsDAMk3WTBnhUui4hbwQsmkgb49dqVd1vbMMzbTSaOu5ytX7uJalUXV7u8oSWo6RoFEf6XnyfvKdWYsiNPN9QPVHHKvcr%2bJ1zzBxwmn%2bU5Xt%2bSRLb8DvS8Uw7czjDfG62EGjjxBzQ5NJ2Opc4ug2FWcZ28RdC43/2PcGXng7T/NUhgkR77uBQ9LoIjEJQtwmnyOk4uiHSVmdnJD5Uxul0dbtsAlGjO8y/4dFR4m4NTSgdJebRgXqt06PXDI3PTitw/z8/BeK%2bHF3bFSLEBKK40Q3Ipd02N/8oY/DEd4qab/9So23xrjtIUCNupuR535MAz/rLDM8GCTzk2kf6AfAHHLwT6JqQDHKe%2b4YthMgEIUpAp%2b3o0Zg5UZrrThI3OPsAQe4EO05H/5SZS8Cbc4QIIPf/Tuop95fFv0RDC1j5P0r1P3f23ZTfbX%2b6n5j/P49W46GxvvtfZxnHk5vU6fzJPMb0fM/z87JH03D0WZ2Hvt9a%2bj9/uE74DDQYMgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"739\" alt=\"alt text\" data-srcset=\"/assets/static/6.c484d7f.16bc51534d0bbd5f2ca7e811af5e68da.png 739w\" data-sizes=\"(max-width: 739px) 100vw, 739px\" data-src=\"/assets/static/6.c484d7f.16bc51534d0bbd5f2ca7e811af5e68da.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/6.c484d7f.16bc51534d0bbd5f2ca7e811af5e68da.png\" width=\"739\" alt=\"alt text\"></noscript></p>\n<p>Not bad for a free little tool I'd say.</p>\n<p>From here let's do some testing. I'm going to create a Linux user and copy the hash file to Google drive.</p>\n<p>First, let's create a user (if you don't want to, you can just copy and paste hashes and info from here)</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo useradd -M test</span></span></code></pre>\n<p>We specify -M to prevent the command from making a home directory. Let’s create a password and then grab the user’s hash and learn about it.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo passwd test \n$ sudo grep test /etc/shadow </span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/700/1*FSiYceBAkj5msYUk-gxOtQ.png\" alt=\"alt text\" title=\"User Created\"></p>\n<p>I set my password to ‘Pa$$w0rd’. It is simple for this example and we can crack it very quickly with hashcat.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">test:$6$.9Hl.zh1SmgNUTY1$ATFrFRKT7QCpaPVgtOtNRadSITnqkux8Zc2TtNFe03V55/WCnFAATYgWAzDCOVb/XL/8gdq21Yq1TZAl8ZgWL/:17947:0:99999:7:::</span></span></code></pre>\n<p>This is going into a new file called hash.txt that is being uploaded to the root of my Google Drive. From here we can mount Google Drive in our Colab doc and run hashcat. To mount drive do the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">from google.colab import drive\ndrive.mount(&#39;/content/drive&#39;)</span></span></code></pre>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1246 255' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-894115508a7a9db9c58b82c757653bd2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-894115508a7a9db9c58b82c757653bd2)' width='1246' height='255' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAANCAYAAAAZr2hsAAAACXBIWXMAAA7CAAAOwgEVKEqAAAACJUlEQVR42uWWS4%2biQBSF%2bf/pWXUyS3%2bAS11079zb61FRQPAB2ooPoHjrmTrVwujsxkkwHSv5civ1ourWubfQDocDfN9HksTI8hRZliHPc0VVp1V9V/20aZp%2ba3gGrd1u4%2bXHC45eiKMZY71YYzzWYRomvNUKuj7CfObiMBHYWwK%2bt8PEmGA%2bnyOO47uJouhhCCGU5T60fr%2bPXq8Hd7nE1LLhODYMw5BOGMP/3GA3m2FrmfBNR9YX2DsONraDw/EoVZPcdXjOO51OD%2bd8PkPb7XbKG2EYQsRChQI9RLjRTJKyHn8Ry7Ep27O8DpW/KYpbbvryQq2r6zqGwyFGo9FDGAwGME0TGg/KeBBKHkI5YrvdKrtar5UNwwBBGKl211shjAJsPoHBrwKWfYItsawSY72Ui0pYH5dSSaXqm0xKzJyT/HAh24CPjxVeX3/i/f0NnU4H3W73IbRaLWhMBCy0lGdRFHWCyOiYixII23mLMZWQ8EahkFPqOuGSFVV/NYY2SQpMpww352HYto2ZDG%2bNh2JZLBYwpCQ8z1UDlq4rb82ReWGqBpO5nOC5nrxtS/XTEVEU/jNCRPUrkmUXZzcMv83LrhVAqVMBKv5VshJ1wrpOYJUiYiEu4XEfQRDUHGVC5XPcNNxH7YD9fi9lOVUvAJODQtaNK6r2mzH/CdXEzVRPU1NUF36TA5reRMXXy1E0TlmWfxzwrKV2AH8KnhGN8qsc8IzlN/B7a8vjONFFAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1246\" alt=\"alt text\" data-srcset=\"/assets/static/7.82a2fbd.b5fe89eddaab6d2fdc94c727462e1c35.png 480w, /assets/static/7.3124ec6.b5fe89eddaab6d2fdc94c727462e1c35.png 1246w\" data-sizes=\"(max-width: 1246px) 100vw, 1246px\" data-src=\"/assets/static/7.3124ec6.b5fe89eddaab6d2fdc94c727462e1c35.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/7.3124ec6.b5fe89eddaab6d2fdc94c727462e1c35.png\" width=\"1246\" alt=\"alt text\"></noscript></p>\n<p>Follow the link and instructions to link your drive. Now that we are about to run hashcat on our colab, let's take another look at our test hash and break it down a bit.</p>\n<p>Looking at this hash, $6$ indicates SHA512. The characters after the $6$ up to the next $ are the SALT. For me, that is .9Hl.zh1SmgNUTY1. To further verify what type of hash storage is on our system, we can look at the hash configuration in /etc/login.defs</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo grep ENCRYPT_METHOD /etc/login.defs</span></span></code></pre>\n<p>This returns SHA512 in my case. If you want more details you can view the entire file. We need to sanitize our hash.txt file a bit to make it ready for hashcat also.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo grep test /etc/shadow &gt; test.hash</span></span></code></pre>\n<p>Use your preferred editor to remove the username and colon following. We also need to remove the colons and extra characters at the end of the file. For me, the hash looks like this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$6$.9Hl.zh1SmgNUTY1$ATFrFRKT7QCpaPVgtOtNRadSITnqkux8Zc2TtNFe03V55/WCnFAATYgWAzDCOVb/XL/8gdq21Yq1TZAl8ZgWL/</span></span></code></pre>\n<p>We now need a wordlist. I prefer the rockyou list as a base but you can start wherever you’d like. To download the rockyou list go to skullsecurity.org or just</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">! wget http://downloads.skullsecurity.org/passwords/rockyou.txt.bz2\n! bunzip2 rockyou.txt.bz2</span></span></code></pre>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 998 336' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-f9233b947633be6633ac07c676396805'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-f9233b947633be6633ac07c676396805)' width='998' height='336' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAWCAYAAABwvpo0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAHYUlEQVR42uVY2VLjSBD0X89nzF8NA%2bY0YC4fsnVfliVLxlhHbWbJIgzBDgPL7D6sIjraqu7qo47MknubzUYeHx9lu32SqqqkRivLUn9XVam/S8rrek/eznlLVnb9nrxbd3/eC53de9dvt1t5enr6V1rv%2b/fvMpvNJc83EgS%2beJ4ni8VC%2byiKJY5jCXxfXNeTMAzFh9zzXJ3jOI74GKNeEAQ6P4oiSZJEx7sxruV61A%2be1/X99nccL573417s0zRTp6zX6z/eet%2b%2bfZPJZCpFvhVjOpbhza24ji39fl/6x8dyd3cng4tzOTrqy/kZ%2byO0Q7keDuXg56GcnpzIya4dH5/KMfSur4dyfnEhP34cyOHPn6rTP%2bZ4H%2bPHcnV1JUfoDw4O5GIw0PfDw6OdvC8hDMTILIp/wQB5nutmTIG6aaRB68KbrdqFv0jzLOta%2b7Rj7dPsWr33uxuTV7L9uS/XahruWT330rS/9xvl%2byn22dbLskwv/fS0gecdMU1TgjBCiLoSoc%2byXBzblmQRa6jO5nMp1gWURaYTkZPTRkZjEcNo4PVaLi4aubut5fS0lrt7kcGgkZthg4hpVHaL/vYG/UMjE%2bhdXjaIsAbr1Nrf3oqcn1eIogq/GznD78FljSit5fKqlvGo1rmm2RqNZ99/mp0Tu/be0%2bu8bFvWLo8jzfMEl42QkxYuz7z0fU8c15UYchpqid60QhmPPbFM5m4Cw%2bUyM3zkeiFzM5KHkYW0asdHYweYkeDSjrj2QibTQKZTV6x5hMsk4ngZDL2AIX1ZZiUwoAE2%2beIHK1zeE9vGHCtCeqzl/sEBXqzkd5/XRtlvPQ08GMCC53lBAheN4diWglkA4PMgt2EIy7IV%2bGbGFNERwjgW9OYwiKlgF8ch9OaImiUM6cOAEQAUF3dtgCgN6WDtGSIpgq4p5tyAsW3ouuLBwJ5rwXieZKsUc2IJIQ8CT/VMc4Y9XYz7OIOlusxhOqxAT0fyvQPgNOUaiTLKW5HyHAE6CGVeejQa6QXZzPlMPZ8sU1zC09DnwvO5Cc/gMFEImQmDhWq8uWnBSA6MZOnmPJhpOrJAFBFkOdbqGsoABpjHhkFtGNE0GX2RsswS%2by1wCcry1QrvSzBUoeuti0JWkLHFvDjwi2fKi0IpO8O%2bPDvv0jKOr1T3rgHqXQpQYQMFXt6kZ11HHjdreJUXDhR4SIEevJYuY1CbK6ss1XkOosBHFPBCVdVuSu%2bt4M0YuoopiAh6nyxjWaZGTwSPM9X%2b5PMrLGgNgAgI9PAIVaQAvUgrW3ORs4sKFNdgDGB2UwGUAEaDGsBWA/RK5HElw6tKRvcEqQrySh7uSuRpKTOzAUZgHLIrjF0MKtBqhbFargBykzGBstXj/PmsxB4lcKCU0/NS0qSAJwnKMLrLiGRqGkixhXTnZtvP6ddM1V3%2b70Cx1w2uwAb0CkPddtw2X22EsZUC1S14LYaXF0BmU0EO0%2bXhAQY6axTJTatRlD4/aw10fd2A%2b3GxO6A/5gyB/jTkzVBwSRgQaD%2bdCtZuWYJscs55N2AF6KPkQCSSKWBUGNSAoU0Thh49yXRW695l9YURwFwlABLtgyDUvF8uE1nlGRgB76GvAMQUCOGR9TrHIQIcNpLhdShTI8HhElw0wsUyXIwskIEqE1BggLFYri59GMvV8cHAw7uHeSHoD%2btcRogSHxGTQm%2bJcReRFGO9ENGyBDVCbwJn3CVyf5/I2amJKC20eiR2aFkOwGM6%2bVpVRgrgCTDk3QigMrl%2bZhhKhS5QnywQAKwyAA1LYRvgQnAjOBEEuYHjkik4f6YRQwRnmG42OQyUKrqnaYRImmFepKHL%2bevHFQ4WKY5QtloByHKCXQI9lsErYEUoG/Tde5qyOmzfiyKFbqQFHEGSyE%2bwK8utvvO8lJGylzjzuwZgHTCbGnpxIuocaWCA6ojaEWr18ehBGYH1uWHMFCsioKxtu1rLO0B4fk84SB0aiAcrEZ%2bkTR6k1X2S/%2bp5NwWaBhHgtBFgIDEz0M4CHraBCWNQ2GQ8aTkXl75B8q5ISwDNW5R6JqkM80hzbK7WDCiAECVMJeIK175BiRfi/b3C5E%2b091MAEUDqI53Ra%2bRWpgK/DfjbgldN5daoLYdxOebdFMZKs49XZJ/14Fcb5AULPMLDzKMCKdB9K7ff%2b1v1PuWbnbz9eNpq/5qGvtJbH63rP5MSvfdy5Cvq7d2Ef5SvlNPodAax6DPtLYf1ug2Y8wQxtiRZaqnL8pNhz2%2bE/YeVXAA6dL2WMarnT%2bO3n%2b3mUapGlGqzdIl0IoXlGk3pcqHfFsbc1OKLzwbziS05KJigWqwfVc7z8POd0fiRRh0ajulLQ7zAgC68eThu0H0Rkl%2bVY6O2Ru/%2bQODc9l%2bfBT5acuHndLcBx/b/bOjeWWTluz26dVPISKtch3vS0HznAWkIcniGMrubS7n%2bs%2bS62n%2b0scbhdwJpkmt1Z%2btxA1qGA79qnNO1jnv5ydx9ff2y7ebsr6f6u7Yve73Hvvy39vpg68n//PkLuvMW41YgdyMAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"998\" alt=\"alt text\" data-srcset=\"/assets/static/8.82a2fbd.2f59b34fcf2dd46280634f5daa66ad03.png 480w, /assets/static/8.d4ea800.2f59b34fcf2dd46280634f5daa66ad03.png 998w\" data-sizes=\"(max-width: 998px) 100vw, 998px\" data-src=\"/assets/static/8.d4ea800.2f59b34fcf2dd46280634f5daa66ad03.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/8.d4ea800.2f59b34fcf2dd46280634f5daa66ad03.png\" width=\"998\" alt=\"alt text\"></noscript></p>\n<p>We have our hash and our wordlist. Let’s crack it!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">! hashcat -m 1800 -a 0 -O -o found.txt &quot;/content/drive/My Drive/hash.txt&quot; rockyou.txt</span></span></code></pre>\n<p>Let’s break the command down a bit, -m specifies hash type, -a 0 tells hashcat we are doing a dictionary attack, -O tells hashcat to use the optimized opencl kernel, -o is output file, — remove will delete our hash from the original file.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1719 966' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a9169b0dfd50dd4affa7780acd304d13'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a9169b0dfd50dd4affa7780acd304d13)' width='1719' height='966' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFyUlEQVR42t1ZyW7jRhDVH88tPxUgx%2bTmYw6DHA0jo5mJtVIiRYk7m3vlvWq2LTsxxogyY8oCCr1SZL1%2btXT3rC9WIuHvUtS5bA%2berFdrWS6XstlsZOd5UteNDMMgU/%2b5b2zbVvb%2bHt9dS1EU0nWdGGOkLAvbVxop4qP89svPEp4SmfXxnzJsfpU0OYl/OMh2u5XdbicblKxHUSSB70sUx5IkicrpdJI8zyVGH%2buuv%2bt7/ZC3Ev6qqpLP88/6PXvowbaP79/tPEnTVMLwJOvlJ/nw0wf5svRk1uG5Hg%2bWRanKlkAoTVKUpT5sIHyQbSdElqhmWaov4niWZRYASP%2bGwh9qcjwe9VubpnlgSVUZqaFP1wMwyxuZ5XmGTiMN6KGrCMpwZUmX/0LDKUha5RIEgXgwYTKVZkEgTqfjuMil6scFnnGQyHEgjhNMbBWEFiUnGaLGyXWlD7Cugj%2bsXZv181KleTKPH%2bCkbuqzef%2b/8Nud0mQqv5v6LRYL9W80bc4jQDNHkZubG/n48Q/J0lzu7%2b/lAH8QArE9HEYURxIlsTKD/Zv1Go7Glxg0S/Y7ieAwY9ibirdF3x51T/sT9CV4xkO5Wq3UvxBo65jK7y40TQrNlOL8Fc2Yes5YIRpUjhPjiM4ONp0XaOeYWII6EWzqpHM4P4oIRioNUB5gT31H%2bxtGOxzO6o9CVjn5kT7hJWdJ05jP5zLjSjh7IG3KMpHKQLmGdlLigzlGp5dpu2mqh3bb1vhDhEnpbTl0jyX7pJ9suAzDUG5vb2XGhto8lLcTCiCXQFgSiB1kC1lDNpjnQ5gfLCAbHa%2brFUD7iv4jwFmoNI0POWhf20Z4RzGuwNs7S/4YJRQAdjiHce7JLTClKlnXcBoVAdhDuSXantbZT0XbNrRAEJB6N7Yxjrldl41g1g//%2b5aJ1b8ygAA4BnRdrAp0XaKrV9dryBKKf9FSwUBpqvkIxlpLYz5B6QDlHPLXCM5e/8OCUF4JAAyLLRwVMqS2zqQqoWBJBlDAAIO22WidTLCrfVBlrZARJwWjwTiV77oUAFTTB4BZnMFAhfBnYCMmPEjhe5LtVlLGvhiky8URKeV2JUUIG4cjHAZSu1fHR6pbJ9gr5fveyPDCB0wSAIaNmHGSqS%2biQ5zYkknNpS899y2TZQCjATcNzJCCwNfNBIWTdc6Yydmy1j6GUD73Gs87hV3lN32A0ewp1e1jpRuhRBMjbpKMKTWbyjWzSjTTYnLknn3NiycLgMsFuIlg5kfFImx1mfpS0QSpMB/KkEExlbSbikJCjHMO4yqFDGLJLXQQYCwINO29CgZYE9ip7JHPUzxsHFhSIZoGx3gGQIDceYDdSEVP2tFYsu12lldhAiy5Ym3baE7vTlLcyQoZcMmLJ20CdGzcsXHFudIr7PocrQ96WmQZwBMWttcYJzO4QepfcRo0%2bTBIENwRFylNCrujL5ZK7XHXmI%2b%2bwO0mr4UF3wSAK8pcgI6PodAdLfGBA4SnKj4cG0FIAIayAf0cd0dQeigx/qcLlY%2bbrekw4O7u7nkUaGS5XCjVc6wsV5hnAvYgIVZgHBvi0cFxDs8KnjOFzHCiEWMikcC935nw01QYg1SA8f97vnwKADDc82jsmRNstJO09sewp44O8dylw5fuw6fCgH8A4GyUtrEd7wRiNYFMwTl/%2bN0CwMFwtA0OEozXKvz8MGXqN0gvMoBentdizAXC8Hh1ic7FDKDXpiN0x8rNWTg79xWubqV/HwygMprsQCqELYa5E%2bru%2biuFPyBA9m4w01DJVLkAUO8CAKazXH0qy5jO3J/Ks%2b9c0jQb7wxs7Hd3ctd0i/wCAN1D8nJ%2bEeouSrvx9JiZnTUDW%2bem6Z0woBMfzo8boi0cIc8FmAvQKTLdPb9pfZdO0F0YUGl7EFJoKGRYpFlcw5HXxQBwM0QG0LYrU2pGyBtVOsZrofllDMCKLxdLKB7AvqvxYvR4VY7utZshLuzfBjlg4P3cV7EAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1719\" alt=\"alt text\" data-srcset=\"/assets/static/9.82a2fbd.2e71d5a1e5915aff4d0ba48610250aa4.png 480w, /assets/static/9.cbab2cf.2e71d5a1e5915aff4d0ba48610250aa4.png 1024w, /assets/static/9.30c4703.2e71d5a1e5915aff4d0ba48610250aa4.png 1719w\" data-sizes=\"(max-width: 1719px) 100vw, 1719px\" data-src=\"/assets/static/9.30c4703.2e71d5a1e5915aff4d0ba48610250aa4.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/9.30c4703.2e71d5a1e5915aff4d0ba48610250aa4.png\" width=\"1719\" alt=\"alt text\"></noscript></p>\n<p>To view the results ...</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">! cat found.txt</span></span></code></pre>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1029 101' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3c41c9c13caa33a0043bf443cbc6500c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3c41c9c13caa33a0043bf443cbc6500c)' width='1029' height='101' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAGCAYAAABzaJivAAAACXBIWXMAAAsTAAALEwEAmpwYAAAB8klEQVR42t1TWXKrMBDk8r7Oy68vkVwgNrvYDGIxNjbG7kxLhhBX5R0gVDUjjWaRpmec0%2bmEpmnQti2G4YxxHA2u1ytut5sB95SXy%2bXPwSmKApvNBm9v/3AZHkhUCs/zkCQJ9rsdXNdFrGLsRbJYfwHn83mBU5YlttstPj7eheU7jscjtK7FsMfhcICuKnRdh7pubDcIpmmy3SGS6/E2Lt2yxmL3H6xt5k5b66dnjle/te1vcedunqaffsMwLHD4Y1V4yEfXMg79sZOx6DCcZTxaebzWUoDanDUiWTTuq6qUIpWmYBwj6rjmOGldGbtKCljX2vhpiaMrbeVzz3P6fK9tLnZmrW0OxqGNuQfzcGQFxl5iU982rZHUEfRphbi%2bP9o7POOSYH6Px8PA4RxEUYROLk0kaYZDkSMvyH6JVPa%2b78Hd7%2bUsRZFlCMMQSiWIwgCeHyITne%2b5iJQyseJYySjF8INAxkfWiYKKY%2bPH0UqSFFmeW10UIs8LQY5SOk7RXuC6nlkzbxD4z5jK%2bPEetPX9AFEcSbFsrFRi0yeX%2b3x%2b7kR/MESEYbT4VlIIPpwdcr/f4fS9bXXD1sz0E2SjaYRdKQwZnlme19ST7dn%2b1aZd%2bb1isWm%2b/cnmfL72bV/yW9v6x/41/3wv%2b4Zm1aHavHfGF/mhuyxDva8SAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1029\" alt=\"alt text\" data-srcset=\"/assets/static/10.82a2fbd.79256b7ba4a3a506a54cb6bed6872aa0.png 480w, /assets/static/10.ba0a168.79256b7ba4a3a506a54cb6bed6872aa0.png 1029w\" data-sizes=\"(max-width: 1029px) 100vw, 1029px\" data-src=\"/assets/static/10.ba0a168.79256b7ba4a3a506a54cb6bed6872aa0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/10.ba0a168.79256b7ba4a3a506a54cb6bed6872aa0.png\" width=\"1029\" alt=\"alt text\"></noscript></p>\n<h3 id=\"in-closing\"><a href=\"#in-closing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>In Closing</h3>\n<p>You can obviously get more complex and can also use this for machine learning as well as a number of other tasks. The best part is that it is jupyter pages. LaTEX, Python, and a ton more are available. Play around, share, and enjoy.</p>\n<p>For me, the most common use cases are for CTFs, quick tensorflow examples, or simple collab docs for things without sensitive information. A good use case is if I am showing someone how to do something quick in Python. I can write a guide where the code can literally be executed on the page for demonstration. </p>\n<p>Let me know what kinds of fun projects you start!</p>\n","excerpt":"I know this may sound too good to be true, but trust me on this one ...   Intro to Google Colaboratory Colaboratory, or \"Colab\" for short, allows you to write and execute Python in your browser, with","description":"GPU accerlerated hashcat on Google for free","path":"/using-gpu-accelerated-hashcat-on-google-colaboratory-free/","cover":"https://images.idgesg.net/images/article/2018/07/google-cloud-services-100765812-large.jpg","tags":[{"id":"hashcat","title":"hashcat","path":"/tag/hashcat/"},{"id":"cloud","title":"cloud","path":"/tag/cloud/"},{"id":"google cloud","title":"google cloud","path":"/tag/google%20cloud/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}},{"node":{"id":"fe1a9c4eb3be05bf3e17a204442d4aea","title":"Worldwide Accessible Pi-Hole With Cert Based Auth!","timeToRead":18,"datetime":"2020-03-29 00:00:00","content":"<p>Ok, ok, I know it sounds crazy! But please, hear me out on this one. What we are going to do is take a Pi 4, install Raspbian Lite, PiHole, Squid, Webmin, and AutoSSH. With these things and a free instance in Google Cloud Platform we can have some fun!</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*BJk1CHSD9-Sc8R0FjG2hYg.png\" alt=\"alt text\" title=\"Pi-Hole\"></p>\n<hr>\n<h3 id=\"hardware-and-initial-setup\"><a href=\"#hardware-and-initial-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Hardware and Initial Setup</h3>\n<p>First things first, we need to gather up the hardware we need. I’m using a Raspberry Pi 4 to get the true gigabit connection but this will work on all models with a few different tweaks. Other than the Pi, we need ethernet cable, micro sdcard, power connector, and case/accessories of your choice. We also need an internet connected computer to download Raspbian Lite.</p>\n<p>Now that we have all of our stuff. Let’s get started with downloading. Head over to <a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.raspberrypi.org/downloads/raspbian/</a> and download Raspbian Buster Lite (or the most recent one if something is newer)</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*Rchwe29P3ksSH5EYMMPJvg.png\" alt=\"alt text\" title=\"This is what we are looking for\"></p>\n<p>Once this is downloaded we need to copy it over to our sdcard. There are a few ways to do this and the amazing people over at raspberrypi.org wrote excellent directions based on whichever operating system you are using. Once the copy is completed we need to add one thing to our boot partition. Create an empty file and name it “SSH”. This will enable ssh on first boot and you can use the Pi completely headless.</p>\n<p>Now that we have this all done, connect directly to your main switch/router/connection to the outside world and power on.</p>\n<p>After a bit of time you can check your DHCP server for what IP address your device was allocated. We can then ssh over with</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ ssh pi@ip_address</span></span></code></pre>\n<p>Once we are logged in there are a few things I recommend doing before proceeding.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo raspi-config</span></span></code></pre>\n<p>Ensure locale and any other specific things you want are configured. Also we need to go into advanced settings and allocate less memory for GPU to ensure our little device has the most RAM it can have to accomplish tasks. I am using 16 on my Pi4 but on lower models I suggest 8.</p>\n<p>Next we need to do the obligatory</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get update &amp;&amp; sudo apt-get -y upgrade &amp;&amp; sudo apt-get -y dist-upgrade</span></span></code></pre>\n<p>This will ensure we are all up -to-date before we begin.</p>\n<p>Still with me? If so, awesome, if not, well, you’re not reading so it doesn’t matter. From here I’m going to install pre-requisites for pihole, webadmin, and squid. I am going to be running squid as a web caching proxy, pihole to block all the ads, and webadmin to manage the pi remotely from a browser. I will list which items are for which so you can exclude items if you don’t want the services.</p>\n<hr>\n<h3 id=\"pi-hole\"><a href=\"#pi-hole\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Pi-Hole</h3>\n<p><img src=\"https://miro.medium.com/max/1098/1*yGEV1VBZD_lQ_oU8oXZ1cw.png\" alt=\"alt text\" title=\"Pi-Hole Logo\"></p>\n<p>First, let’s begin with Pi-Hole!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get -y install git\n$ git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\n$ cd &quot;Pi-hole/automated install/&quot;\n$ sudo bash basic-install.sh</span></span></code></pre>\n<p>The installation for Pi-hole is very straight forward. Follow the on-screen prompts, answer questions, and you are good to go. Once we have this setup and configured how we want there are a couple changes we need to make.</p>\n<p>First, I’m going to modify lighttpd to only listen on localhost.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*wa7kMq5LgO5mHWw7aaGBuA.png\" alt=\"alt text\" title=\"Lighttpd Directory\"></p>\n<p>To do this we need to do the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vi /etc/lighttpd/external.conf</span></span></code></pre>\n<p>From here we just add the line:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">server.bind=&quot;127.0.0.1&quot;</span></span></code></pre>\n<p>Save the file and restart the service.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl restart lighttpd.service</span></span></code></pre>\n<p>We aren’t finished. If you notice, this will not allow you to access your device through a proxy. To remedy this problem we need to edit another file.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vi /var/www/html/pihole/index.html</span></span></code></pre>\n<p>We need to change line 10 to match the following</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$serverName = htmlspecialchars($_SERVER[&quot;SERVER_ADDR&quot;]);</span></span></code></pre>\n<p>We also need to edit auth.php</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vi /var/www/html/admin/scripts/pi-hole/php/auth.php</span></span></code></pre>\n<p>Under the following section you MAY need to add your FQDN to ensure all configuration changes, logins, etc through the proxy function. You can test as needed.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$AUTHORIZED_HOSTNAMES = array(\n        $ipv4,\n        $ipv6,\n        str_replace(array(&quot;[&quot;,&quot;]&quot;), array(&quot;&quot;,&quot;&quot;), $_SERVER[&quot;SERVER_NAME&quot;]),\n        &quot;pi.hole&quot;,\n        &quot;localhost&quot;\n    );</span></span></code></pre>\n<p>For me, I needed to ensure localhost was listed since we are using localhost to access the server through the proxy.</p>\n<p>We are now able to access the dashboard through a proxy. If this is all you want to implement, skip ahead to the Google Cloud configuration and the AutoSSH configuration. For now, I’m going ahead into squid and webmin.</p>\n<hr>\n<h3 id=\"squid\"><a href=\"#squid\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Squid</h3>\n<p><img src=\"https://miro.medium.com/max/1400/1*8JCkAUbkUcaMWCXnUgzJrA.png\" alt=\"alt text\" title=\"Squid\"></p>\n<p>Squid is a web cache proxy. I LOVE it! Anyway, how I configure it works really well for me, you can honestly adjust everything as you like.</p>\n<p>To begin we need to install squid and all the parts of it we will be using later.</p>\n<p>Since we have Pi-Hole installed we don’t need to worry about a static ip address. If you are only here for squid, well, USE STATIC IP!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get -y install squid squid-cgi calamaris squidclient</span></span></code></pre>\n<p>This will require some additional packages but they will be installed with these.</p>\n<p><strong> I’m using squid-cgi to view data via webmin. If you don’t wish to use webmin you can just go with squidclient and monitor via command line*</strong></p>\n<p>Let’s get to configuring our proxy!</p>\n<p>Best thing to do at the start is backing up the default configuration in case we mess up everything.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo cp /etc/squid/squid.conf /etc/squid/squidoriginal.conf.bak</span></span></code></pre>\n<p>Now we need to edit the config. Here there are only a few options to enable/change. I prefer vim if you haven’t noticed from previous things or even my usage here. To search you just use a ‘/’. If you prefer nano you need to use ‘ctrl’ + ‘w’. Either way find the sections and edit/add lines as needed. Most of these are editing current ones minus the acl ones.</p>\n<p>First thing first! ACL! Most private CIDR address spaces are covered. I recommend commenting all of these out and adding your own to reflect your network. Mine is:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">acl localnet 192.168.2.0/24</span></span></code></pre>\n<p>Ensure we have the acl allowed</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">http_access allow localnet</span></span></code></pre>\n<p>Now adjust dns</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">Find: # dns_v4_first off remove the # symbol and change off to on.</span></span></code></pre>\n<p>The remaining changes I’m making are as follows:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">Cache_mem 256\nMBMaximum_object_size 4096\nMBMaximum_object_size_in_memory 8192\nKBCache_dir ufs /var/spool/squid = 8192 </span></span></code></pre>\n<p>Now we save and exit. Then we backup this configuration just to be safe.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo cp /etc/squid/squid.conf /etc/squid/mysquid.conf.bak</span></span></code></pre>\n<p>After this we can start our proxy</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl start squid</span></span></code></pre>\n<p>Squid is now up and running! From here I’m going to configure webmin to manage this as well the rest of my pi remotely. You can leave it here or continue along.</p>\n<hr>\n<h3 id=\"webmin\"><a href=\"#webmin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Webmin</h3>\n<p><img src=\"https://miro.medium.com/max/1400/1*Uj85QkRucFxt7k_W5u3PRw.png\" alt=\"alt text\" title=\"Webmin\"></p>\n<p>So.. personally, I’m not the biggest fan of this software. I think it is a lot of overkill for what we need. It does however make things very easy. We are going to cheat in installing this a bit. It seems odd but trust me, it makes our life easier.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ cd ~ \n$ mkdir webmin-download\n$ cd webmin-download\n$ wget http://www.webmin.com/download/deb/webmin-current.deb\n$ sudo dpkg -i webmin-current.deb </span></span></code></pre>\n<p>This is going to error saying we are missing dependencies. That’s perfect. We want that to happen. Now we can go ahead and install dependencies and webmin with the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get -f install</span></span></code></pre>\n<p>Now webmin is all installed as well as our required packages. Simple right?!</p>\n<p>We do have some configuration to do here to allow us to manage squid from webmin as well as make it only listen on localhost.</p>\n<p>Let’s browse over to our Pi and open the webmin page.</p>\n<p><a href=\"https://IP_OF_PI:10000\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://IP_OF_PI:10000</a></p>\n<p>The login will be username and password of your pi. By default this is pi:raspberry.</p>\n<p>Next we need to go to the left and find squid under unused modules section. In here we need to adjust the paths to everything and adjust the startup, stop, and restart script sections.</p>\n<p><img src=\"https://miro.medium.com/max/1352/0*wpLGTjxNhDKryMUL\" alt=\"alt text\" title=\"Squid Config\"></p>\n<p>The highlighted sections you will need to make match your install. For my install I had to change all from squid3 to squid and the scripts all to the corresponding systemctl ones. For example:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">service start squid</span></span></code></pre>\n<p>changes to</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">systemctl start squid</span></span></code></pre>\n<p>I’m confident you can change the rest. Depending on webmin version you will have some additional prompts to change. I had none.</p>\n<p>We can now manage our squid server via webmin and add more things as well as adjust ssh settings, monitor pi, and all sorts of fun little things. From here we are going to make some additional adjustments for our installation to only listen locally and work through a proxy server.</p>\n<p>The MOST important thing is to adjust access controls.</p>\n<p>In here we want to go to proxy restrictions tab and ensure manager is not denied. If so, we will not be able to access settings once we connect to our proxy server.</p>\n<p>This is what mine looks like:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*uMKELXgysR3CI5HI8Hf8RQ.png\" alt=\"alt text\" title=\"My configuration\"></p>\n<p>From here we are going to go into webmin configuration. Look to the left pane and click webmin section and select webmin configuration.</p>\n<p>In this section we will be disabling SSL. The other options are easier to do in the config file itself. We can actually do all of these changed in config files but selecting a radio button I find easier than searching for a line in a config file and editing.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*qOJwwSC0sbDQmDvdCGbuIw.png\" alt=\"alt text\" title=\"Webmin Configuration\"></p>\n<p>Select SSL Encryption and under Enable SSL? select NO</p>\n<p>Yes, I know this seems like a bad idea, but don’t worry. We are going to handle our own SSL later.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*weVJ_MGv0IaOOUWMYtbGaA.png\" alt=\"alt text\" title=\"SSL Configuration\"></p>\n<p>Save settings and we are now going to ssh into our pi. From here we will execute the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ cd /etc/webmin\n$ ls </span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/1400/1*hAoFAzZWZ9tO0iuP6rtozA.png\" alt=\"alt text\" title=\"Webmin Folder\"></p>\n<p>We need to edit the file called config and add some lines to the bottom.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vi config</span></span></code></pre>\n<p>We will then add the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">referer_none=1\nreferer=1\nreferers=127.0.0.1</span></span></code></pre>\n<p>Once this is done, save file and exit. Now restart webmin</p>\n<p><img src=\"https://miro.medium.com/max/772/1*lo29kgQGz0CARUpbVkYnSg.png\" alt=\"alt text\" title=\"Webmin Config File\"></p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl restart webmin</span></span></code></pre>\n<p>We will now only be able to access our webmin page via proxy.</p>\n<hr>\n<p>Time to get started with SSL. We are going to setup our own CA here and generate some user certificates. I know this guide is a bit long but this part ensures all ourinternet accessible stuff is as secure as possible.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*Y_6jv8KwO4Dny4r3MxNpig.png\" alt=\"alt text\" title=\"OpenSSL\"></p>\n<p>I HIGHLY recommend you put your CA on a non-internet connected device. If you must put it on something that is connected, ensure you secure things. If your CA is compromised your organization is compromised. The guide I’m giving is on Linux using OpenSSL. There are a lot of things that are up to personal preference and you can adjust as you see fit.</p>\n<p>You can do all of this in whatever directory you choose. I’m just working in /root and will be giving a very quick setup. First we need to create our openssl.conf. Mine looks like this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">[ ca ]\ndefault_ca = CA_default                 # The name of the CA configuration to be used.\n                                        # can be anything that makes sense to you.\n[ CA_default ]\ndir = /etc/ssl/ca                       # Directory where everything is kept\ncerts = $dir/certs                      # Directory where the issued certs are kept\ncrl_dir = $dir/crl                      # Directory where the issued crl are kept\ndatabase = $dir/index.txt               # database index file.\n#unique_subject = no                    # Set to &#39;no&#39; to allow creation of\n                                        # several certificates with same subject.\nnew_certs_dir = $dir/certs              # Default directory for new certs.\n\ncertificate = $dir/ca.crt               # The CA certificate\nserial = $dir/serial                    # The current serial number\ncrlnumber = $dir/crlnumber              # The current crl number\n                                        # must be commented out to leave a V1 CRL\ncrl = $dir/crl.pem                      # The current CRL\nprivate_key = $dir/private/ca.key       # The private key\nRANDFILE    = $dir/private/.rand        # private random number file\n\nx509_extensions = usr_cert              # The extentions to add to the cert\n\nname_opt = ca_default                   # Subject Name options\ncert_opt = ca_default                   # Certificate field options\n\ndefault_days     = 365                   # how long to certify for\ndefault_crl_days = 30                    # how long before next CRL\ndefault_md       = sha1                  # use public key default MD\npreserve         = no                    # keep passed DN ordering\n\npolicy = policy_match</span></span></code></pre>\n<p>You obviously will want to adjust things as needed here for your configuration. Now I’m going to create some files. Again, I’m logged in as root.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">mkdir -p /etc/ssl/ca/certs/users &amp;&amp; \\\nmkdir /etc/ssl/ca/crl &amp;&amp; \\\nmkdir /etc/ssl/ca/private</span></span></code></pre>\n<p>Next, we’ll create the reference files for the configuration. The database index file can be created empty. The CRL number file, on the other hand, will be expected by OpenSSL to have the first number in it:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">touch /etc/ssl/ca/index.txt &amp;&amp; echo ’01’ &gt; /etc/ssl/ca/crlnumber</span></span></code></pre>\n<p>Finally, we’ll create our server certificates and the certificate revocation list for the CA. We’ll set an expiration of one year in our example. Again, you can set this up however you like based on your environment.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">openssl genrsa -des3 -out /etc/ssl/ca/private/ca.key 4096\n\nopenssl req -new -x509 -days 1095 \\\n    -key /etc/ssl/ca/private/ca.key \\\n    -out /etc/ssl/ca/certs/ca.crt\n\nopenssl ca -name CA_default -gencrl \\\n    -keyfile /etc/ssl/ca/private/ca.key \\\n    -cert /etc/ssl/ca/certs/ca.crt \\\n    -out /etc/ssl/ca/private/ca.crl \\\n    -crldays 1095</span></span></code></pre>\n<p>Whew! We got that done. Now to get to generating user certificates.</p>\n<p>All we need to do is the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">openssl genrsa -des3 -out /etc/ssl/ca/certs/users/USERNAME.key 1024\n\nopenssl req -new -key /etc/ssl/ca/certs/users/USERNAME.key \\\n    -out /etc/ssl/ca/certs/users/USERNAME.csr\n\nopenssl x509 -req -days 1095 \\\n    -in /etc/ssl/ca/certs/users/USERNAME.csr \\\n    -CA /etc/ssl/ca/certs/ca.crt \\\n    -CAkey /etc/ssl/ca/private/ca.key \\\n    -CAserial /etc/ssl/ca/serial \\\n    -CAcreateserial \\\n    -out /etc/ssl/ca/certs/users/USERNAME.crt\n\nopenssl pkcs12 -export -clcerts \\\n    -in /etc/ssl/ca/certs/users/USERNAME.crt \\\n    -inkey /etc/ssl/ca/certs/users/USERNAME.key \\\n    -out /etc/ssl/ca/certs/users/USERNAME.p12</span></span></code></pre>\n<p>Obviously adjust names, paths, etc based on what you are doing. If everything was configured correctly, we are 100% good to go!! Remember based on OpenSSL versions, Linux distribution, etc your experience may vary. This is only a rough guide on how to do this.</p>\n<hr>\n<p>To the cloud!!</p>\n<p><img src=\"https://miro.medium.com/max/556/1*pU5dtthop4tgAISuR742EQ.png\" alt=\"alt text\" title=\"Google Cloud\"></p>\n<p>You can use any cloud platform or even a server with static IP address for this part if you choose. I’m going with Google Cloud Platform because, well, there is a free tier that is perfect for this type of thing. This is going to be a guide on setting up your instance, installing nginx, configuring nginx, and setting up SSL. We will need some things from our CA in a bit.\nGoogle Cloud Platform\nGoogle Cloud Platform lets you build, deploy, and scale applications, websites, and services on the same infrastructure…\nconsole.cloud.google.com</p>\n<p>Here you will need a Google account. If you are averse to Google, I apologize. Once here, you will need to setup billing. What we are doing is in the free tier so you won’t be charged BUT you need to have billing configured to allow creation of the things we are doing. Once your cloud billing and account is all setup we can begin.</p>\n<p>We need to create a new project. Once you have your project created we need to click on compute engine in the left side menu.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*8EJg7W36vN2YyXFqqe5R6A.png\" alt=\"alt text\" title=\"Compute Engine\"></p>\n<p>Don’t worry about the submenu. We are just going to Compute Engine section. On the top of this page we need to select Create Instance</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*SeeRpVBn66aLtXA0WWsHFw.png\" alt=\"alt text\" title=\"Create Instance\"></p>\n<p>You will be greeted by a page that looks something like this:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*rVm8miIjyxMmfLcwbauNTQ.png\" alt=\"alt text\" title=\"New Instance\"></p>\n<p>Ignore the price and everything for now. We are going to make a bunch of selections and the price will still say something when finished. Every account though is allowed one micro instance for free.</p>\n<p>Things to setup. First, we must name our instance. Next we need to change Machine type to f1-micro. There should be one option. This will make changes to region, zone, and boot disk. You can make adjustments to all of these as you see fit but ensure you are in us-central region and the machine type stays f1-micro. If those change you will be billed for your virtual machine.</p>\n<p>Once options are selected go ahead and create your instance and wait for it to finish.</p>\n<p>During this time, if you are familiar with Google Cloud Platform you can change settings to meet your needs, if you aren’t, I recommend using this time to just browse through your options and read up on what the free tier includes. There is A LOT of things you can do.</p>\n<p>Once our instance is complete we just click the SSH icon next to it. Your screen should look something like this:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*8cW9tzFMaFHhJKNiPI-f-g.png\" alt=\"alt text\" title=\"Our Instance\"></p>\n<p>If you added any extra keys or anything they are being copied over. Once we are logged in we need to do our usual house items such as updates and installation of packages.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get update &amp;&amp; sudo apt-get -y upgrade &amp;&amp; sudo apt-get -y dist-upgrade$ sudo apt-get install nginx certbot</span></span></code></pre>\n<p>From here I recommend setting up ssh keys. You can generate them on your cloud instance or on your pi and copy them over. You just need to run</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ ssh-keygen</span></span></code></pre>\n<p>And follow the on screen prompts. Your pi and cloud instance will need to share a key in order to perform ssh port forwarding we are going to setup. From here we need the key shared with our pi and added into the Cloud Console. If you don’t add to the Google Cloud platform the keys will not be persistent on your vm. To add them select the Metadata section under Compute Engine and then Select the SSH Keys tab to add your key.</p>\n<p><img src=\"https://miro.medium.com/max/1052/1*6tXnjOHirPfeQSzgMXTLKA.png\" alt=\"alt text\" title=\"Metadata Page\"></p>\n<p>Now I’m going to hop over to our pi and configure AutoSSH.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo apt-get install autossh</span></span></code></pre>\n<p>Once we have this finished we need to ensure we can ssh over to our cloud instance from our pi with the key we generated. If this is not working, troubleshoot and come back. I know I had some spacing issues the first time adding the key to the metadata section.</p>\n<p>Once ssh works we need to test autossh via command line. The command and options I used are:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ autossh -M 0 -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -R 10000:localhost:10000 user@instance -f -T -Nautossh -M 0 -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -R 8080:localhost:80 user@instance -f -T -N</span></span></code></pre>\n<p>As you can see that is for forwarding my webmin port in the first command and the pihole port in second. We need to go over to our Google instance and verify ports are listening on localhost.</p>\n<p>I do this with:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo netstat -antp</span></span></code></pre>\n<p>I use sudo with those switches to see what process is running what. Anything outside your user will not show pid and process name.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*9Q_A1wYjEbbLTvbFDKHWGA.png\" alt=\"alt text\" title=\"Netstat Output\"></p>\n<p>And we are working!! Now let’s make autossh into a service so our pi will connect and maintain that connection. Back to the Pi!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ cd /etc/systemd/system</span></span></code></pre>\n<p>Here we need to create two files for our two different autossh commands</p>\n<p>You can name them whatever you want but mine are autossh-pihole.service and autossh-webmin.service. I’m going to just show one and you can then make the changes you need for the second.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vi /etc/systemd/system/autossh-pihole.service</span></span></code></pre>\n<p>The contents of this file should look as follows:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">[Unit]\nDescription=AutoSSH tunnel service pihole\nAfter=network.target\n\n[Service]\nEnvironment=&quot;AUTOSSH_GAMETIME=2&quot;\nUser=pi\nExecStart=/usr/bin/autossh -M 0 -N -o &quot;ServerAliveInterval 30&quot; -o &quot;ServerAliveCountMax 3&quot; -p 22 -R 8080:localhost:80 user@instance -i /home/pi/.ssh/id_rsa\n\n[Install]\nWantedBy=multi-user.target</span></span></code></pre>\n<p>You can place your ssh key wherever you like and use whatever user you like. I HIGHLY recommend using a non-shell, non-privileged user you create. That way if anyone is able to obtain the key and hit your pi they aren’t able to do anything with it. The same on your Google Cloud Instance. Maybe add a user called autossh with no shell. Anyway, once we have this file, save it and quit. Then create the one for webmin. One both are complete…</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl daemon-reload\n$ sudo systemctl enable autossh-pihole.service\n$ sudo systemctl enable autossh-webmin.service\n$ sudo systemctl start autossh-pihole.service\n$ sudo systemctl start autossh-webmin.service</span></span></code></pre>\n<p>From here we verify services started ok with</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl status autossh-pihole.service \n$ sudo systemctl status autossh-webmin.service</span></span></code></pre>\n<p>If everything looks good we bounce back over to our Google Instance. First we verify that the ports are listening as expected. If so, we go to configuring NGINX!!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ cd /etc/nginx</span></span></code></pre>\n<p>We need to create two files for our webmin and pihole services in the sites-available folder. We need to make sure they match either our IP address or FQDN. If you want DNS resolution you need to add A records in your DNS for your domain. For example my domain is b34rd.tech. I added two A records. One for pihole and one for webmin. So my files in sites-available are webmin.b34rd.tech and pihole.b34rd.tech.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vim /etc/nginx/sites-available/webmin.b34rd.tech</span></span></code></pre>\n<p>In here we need to add the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">server {\n    server_name webmin.yourdoain.com;\n    listen 80;    location / {\n        proxy_pass http://127.0.0.1:10000;\n    }\n}</span></span></code></pre>\n<p>For pihole we do similar:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo vim /etc/nginx/sites-available/pihole.b34rd.techserver {\n    server_name pihole.yourdomain.com;\n    listen 80;    location / {\n        return 301 http://$host$request_uri/admin;\n    }    location /admin {\n        proxy_pass http://127.0.0.1:8080;\n    }\n}</span></span></code></pre>\n<p>No, we still don’t have SSL configured. BUT we can verify connectivity here.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo ln -s /etc/nginx/sites-available/pihole.b34rd.tech /etc/nginx/sites-enabled/$ sudo ln -s /etc/nginx/sites-available/webmin.b34rd.tech /etc/nginx/sites-enabled/$ sudo nginx -t</span></span></code></pre>\n<p>If you don’t receive output like this:</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*mq96ywg5v_Dw27YBKd9wNQ.png\" alt=\"alt text\" title=\"Nginx Verification\"></p>\n<p>You need to verify syntax in your files.</p>\n<p>Let’s start up nginx!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl enable nginx$ sudo systemctl start nginx</span></span></code></pre>\n<p>Here we can browse to our cloud instance IP or our FQDN. We will be able to access our applications!</p>\n<p>Now we need to secure them. Luckily with certbot this is simple!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo certbot --nginx -d pihole.yourdomain.com -d webmin.yourdomain.com</span></span></code></pre>\n<p>There will be on-screen prompts showing you status. Answer questions and select YES on redirect all to https. This will edit our config files for us to include all valid SSL certificates. We can restart nginx and verify this once again.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl restart nginx</span></span></code></pre>\n<p>If we are able to browse, are redirected to https we are almost done. We have one final step! Remember when I said we need some files from our CA. Here’s where they come in.</p>\n<p>We need to copy the following from our CA to our Cloud Instance:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">ca.crl\nca.crt</span></span></code></pre>\n<p>I put these files in the following locations:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">/etc/ssl/client/ca.crt\n/etc/ssl/client/ca.crl</span></span></code></pre>\n<p>You can put them anywhere you like but make sure you remember where you put them. We also need to copy the USER.p12 we created to our client machine. Whether that is a PC, Laptop, or Mobile we will need it.</p>\n<p>Final edit. In our sites-available in nginx we need to add the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\"># Client Cert Config\nssl_client_certificate /etc/ssl/client/ca.crt;\nssl_crl /etc/ssl/client/ca.crl;\nssl_verify_client on;</span></span></code></pre>\n<p>I personally add this to the first server section in the files. My pihole config looks like this now:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">server {\n    server_name pihole.yourdomain.com;location / {\n        return 301 http://$host$request_uri/admin;\n    }location /admin {\n        proxy_pass http://127.0.0.1:8080;\n    }listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/pihole.yourdomain.com\n    /fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/pihole.yourdomain.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot# Client Cert config\n    ssl_client_certificate /etc/ssl/client/ca.crt;\n    ssl_crl /etc/ssl/client/ca.crl;\n    ssl_verify_client on;}\nserver {\n    if ($host = pihole.yourdomain.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbotlisten 80;\n    server_name pihole.b34rd.tech;\n    return 404; # managed by Certbot}</span></span></code></pre>\n<p>You will need to ensure you add this to your webmin file also and restart nginx one final time.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo systemctl restart nginx </span></span></code></pre>\n<p>Now browse to your applications same as before. You will receive an error. Import your .p12 file into your client and browse again.</p>\n<p>BAM! Certificate authentication for your applications!!</p>\n<p>Future considerations..</p>\n<p>So, as I said earlier using specific users for autossh is super important. That is the first thing I would suggest doing if you didn’t already do so.</p>\n<p>Second, make nginx not disclose so much information. Setup custom error pages.</p>\n<p>Third, add some CSRF and other security features in nginx.</p>\n<p>Of course maintain patches and follow hardening guides for your pi and your cloud instance as well as nginx, lighttpd, and webmin.</p>\n<p>Also, add some IDS/IPS tools to your cloud instance. At least install Fail2Ban</p>\n","excerpt":"Ok, ok, I know it sounds crazy! But please, hear me out on this one. What we are going to do is take a Pi 4, install Raspbian Lite, PiHole, Squid, Webmin, and AutoSSH. With these things and a free","description":"Setup Raspberry Pi with pi-hole, squid, and cert authentication","path":"/worldwide-accessible-pi-hole-with-cert-based-auth/","cover":"https://pi-hole.net/wp-content/uploads/2016/12/pihole-main.png","tags":[{"id":"raspberry pi","title":"raspberry pi","path":"/tag/raspberry%20pi/"},{"id":"pihole","title":"pihole","path":"/tag/pihole/"},{"id":"squid","title":"squid","path":"/tag/squid/"},{"id":"openssl","title":"openssl","path":"/tag/openssl/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}},{"node":{"id":"5b2b63e751dd4af0b3a71b46036ad058","title":"NVIDIA Jetson Nano","timeToRead":2,"datetime":"2019-03-21 00:00:00","content":"<p>The new single board computer (sbc) from Nvidia looks to be a promising new addition to hobbyists, hackers, and IoT developers alike! The specifications for the device were initially a bit of a mixed bag as the announcement said one thing, the website said another, and the engineers on developer forums had a different list. </p>\n<p>Here's the fully up-to-date details:</p>\n<p><a href=\"https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/jetson-nano/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVIDIA Jetson Details</a></p>\n<h3 id=\"technical-specifications\"><a href=\"#technical-specifications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Technical Specifications</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Component</th>\n<th align=\"left\">Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">GPU</td>\n<td align=\"left\">NVIDIA Maxwell™ architecture with 128 NVIDIA CUDA® cores</td>\n</tr>\n<tr>\n<td align=\"left\">CPU</td>\n<td align=\"left\">Quad-core ARM® Cortex®-A57 MPCore processor</td>\n</tr>\n<tr>\n<td align=\"left\">Memory</td>\n<td align=\"left\">4 GB 64-bit LPDDR4</td>\n</tr>\n<tr>\n<td align=\"left\">Storage</td>\n<td align=\"left\">16 GB eMMC 5.1 Flash</td>\n</tr>\n<tr>\n<td align=\"left\">Video Encode</td>\n<td align=\"left\">4K @ 30 (H.264/H.265)</td>\n</tr>\n<tr>\n<td align=\"left\">Video Decode</td>\n<td align=\"left\">4K @ 60 (H.264/H.265)</td>\n</tr>\n<tr>\n<td align=\"left\">Camera</td>\n<td align=\"left\">12 lanes (3x4 or 4x2) MIPI CSI-2 DPHY 1.1 (1.5 Gbps)</td>\n</tr>\n<tr>\n<td align=\"left\">Connectivity</td>\n<td align=\"left\">Gigabit Ethernet</td>\n</tr>\n<tr>\n<td align=\"left\">Display</td>\n<td align=\"left\">HDMI 2.0 or DP1.2  eDP 1.4  DSI (1 x2) 2 simultaneous</td>\n</tr>\n<tr>\n<td align=\"left\">UPHY</td>\n<td align=\"left\">1 x1/2/4 PCIE, 1x USB 3.0, 3x USB 2.0</td>\n</tr>\n<tr>\n<td align=\"left\">I/O</td>\n<td align=\"left\">1x SDIO / 2x SPI / 6x I2C / 2x I2S / GPIOs</td>\n</tr>\n<tr>\n<td align=\"left\">Size</td>\n<td align=\"left\">69.6 mm x 45 mm</td>\n</tr>\n<tr>\n<td align=\"left\">Mechanical</td>\n<td align=\"left\">260-pin edge connector</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"performance-benchmarks\"><a href=\"#performance-benchmarks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Performance Benchmarks</h3>\n<p>NVIDIA shared some performance numbers as well. We should obviously take these with a grain of salt since these have not been validated in any way.</p>\n<p><img src=\"https://devblogs.nvidia.com/wp-content/uploads/2019/03/imageLikeEmbed.png\" alt=\"alt text\" title=\"Performance Graph\"></p>\n<h3 id=\"overall-thoughts\"><a href=\"#overall-thoughts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"#header-3\"></a>Overall Thoughts</h3>\n<p>I know this information is short and doesn't really tell us much. For $99 this is an SBC that is priced between the Raspberry Pi and the Latte Panda with performance in line with pricing. I look at this personally as a Raspberry Pi with a better GPU that can be used for all sorts of extra tasks. It's advertised to be an AI device for embedded designers and researchers. I would love to see an OpenCL ICD. With that this device can be used to drop in a location, or even carry in a backpack while visiting a site and we can set it up to grab wifi handshakes and use cuda acceleration with pyrit to crack WPA2. We could also potentially cluster the devices together and use them as a lower power hashcat/machine learning setup, still in a backpack. There is a lot of potential here. Hopefully it delivers.</p>\n","excerpt":"The new single board computer (sbc) from Nvidia looks to be a promising new addition to hobbyists, hackers, and IoT developers alike! The specifications for the device were initially a bit of a mixed","description":"Thoughts on the upcoming NVIDIA Jetson Nano","path":"/nvidia-jetson-nano/","cover":"https://www.extremetech.com/wp-content/uploads/2019/03/jetson-nano-family-press-image-hd.jpg","tags":[{"id":"single board computer","title":"single board computer","path":"/tag/single%20board%20computer/"},{"id":"hashcat","title":"hashcat","path":"/tag/hashcat/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}},{"node":{"id":"6894c93d56a2d214e5e206779144f6c4","title":"Hashcat and Machine Learning on a Budget","timeToRead":10,"datetime":"2019-02-19 00:00:00","content":"<p>With the mining craze dying down, there are some amazing deals to be had on eBay and the used PC component market! Here’s what I built using some old hardware and $650. If you are trying to build the end all of password cracking systems, don’t look for used components. Look at bulk order pricing and comparing that to the prices for running something in AWS or Google Cloud.</p>\n<p>First, I have to say, I don’t crack passwords during penetration testing. If hashes are found I will put them into a john cluster or hashcat to just see how strong they are based on my dictionaries but it isn’t something I go out of my way to do. It is really just for an assessment of password security. You can almost always just pass the hash around to get where you want to go.</p>\n<p>Ok, now that I have that out of the way let’s talk about my setup and look at other options. I used my 2009 Mac Pro I previously talked about. It is running Arch and is setup as a Virtual Machine server and NAS. It has PCIe 1.0 and limited power resources. What can we do to solve that? Well, I just use a second power supply for one of the cards. I have a 500W 80+ gold EVGA power supply that is powering just one of my graphics cards. As for the cards, I was lucky on Craigslist. I found someone who was selling all their components for $625. It just so happened there were two Vega Frontier Editions in the mix. After driving to meet and filling up with gas I’d say it was about $650 for two very powerful compute cards, some SSDs, and a few other random components. If we are building the same I have, at least just for the hashcat part, we are looking for a Mac Pro 5,1 with 64 GB RAM and dual 6 core processors (mine was 4,1 but I flashed and upgraded components). As of publishing this auction is live and is essentially the exact same as my system.</p>\n<p><img src=\"https://miro.medium.com/max/276/1*-PP2_5Ly_k28gRbLLxOt9g.png\" alt=\"alt text\">\n<img src=\"https://miro.medium.com/max/276/1*AsGTw2gpe823Zrm0qlNCpg.png\" alt=\"alt text\" title=\"Mac Pro Ads\"></p>\n<p>This system combined with shipping and my card purchase is $1065. If we add in an inexpensive external power supply we are looking at a total of ~$1100–$1150. That’s not bad but if you want just hashcat and machine learning, we can do better.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*x5rKL6KPsjmfERm5rDav1g.png\" alt=\"alt text\"></p>\n<p>4 RX 480s for $450 with all components plus $35 in shipping. It may go up, it may not. Either way, that’s not a bad start.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*aNsnGPc5qDdbLzTlMX9GFQ.png\" alt=\"alt text\"></p>\n<p>This one is 8 RX 580s for $650 and free shipping. Again, it may go up but still, just for the cards alone this is a great price!</p>\n<p><img src=\"https://miro.medium.com/max/700/1*IlUsw4pis60q6iSLX8DAyw.png\" alt=\"alt text\"></p>\n<p>This is another RX 580 rig that is much more professional and has higher end components. I don’t see the price on this going up at all with the $150 shipping charge. I’d probably avoid this one.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*0w-AevzcJUYi74c8cGXFaQ.png\" alt=\"alt text\"></p>\n<p>Now this, if purchased at no more than $1800 would be perfect. GTX 1070 and 1070 Ti cards. Unless using the newest RTX cards nVidia typically isn’t as fast as AMD when it comes to hashing or opencl workloads. That said, 6 of the cheapest 1070 cards on newegg.com would run just under $1800 alone.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*O1a73RXsiolV6uktipdC_A.png\" alt=\"alt text\" title=\"Used GTX 1070 from Newegg\"></p>\n<p>This is just scratching the surface. You can search through all sorts of groups on social media, craigslist, LetGo, etc. There are a LOT of deals to be had and if you want to start doing some hashcat research or dive into machine learning this is the best and cheapest route to go. If you are someone who wants the newest for the best price, I’d look at what your specific needs are. For machine learning RTX cards from nVidia are the best. If you want to do a little bit of both hashing and machine learning maybe look at the Radeon VII. It is better than the RTX 2080 at OpenCL tasks but isn’t as great with tensorflow. If you are a gamer and want to do this stuff on the side, well, look at what games you play and go from there.</p>\n<p>Ok, so, we found our rigs. Mine is an Arch Linux system with two Radeon Vega Frontier Edition cards. The rest of this guide will be focused more on AMD and Arch. If you are a Linux user, I 100% suggest Arch because of the amazing documentation and how up-to-date it is.</p>\n<p>As I mentioned before, I already have Arch installed and if you’re interested in that setup check it out here: <LINK REDACTED></p>\n<p>The only things needed from this base installation is hashcat and Radeon Open Compute. The latter can be a a pain but I’ve tried to make it easier. You need to enable the Arch User Repository (AUR) and can install both from there. Hashcat is just the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo pacman -S hashcat hashcat-utils</span></span></code></pre>\n<p>If you want to build the newest hashcat you can do so from AUR with the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build hashcat-git hashcat-utils-git</span></span></code></pre>\n<p>Once that is installed we will need to do a couple of things. First, we need to see if we have opencl-mesa installed and if we do, we need to see if it is actually needed. Some applications use it and won’t use the opencl we are going to compile. We can check with the following:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ clinfo</span></span></code></pre>\n<p>If you don’t have clinfo we can just search in pamac or pacman</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pacman -Ss opencl-mesaor$ pamac search opencl-mesa</span></span></code></pre>\n<p>If it is installed and needed, this isn’t an issue. We just want to verify. From here we need to begin installation of Radeon Open Compute. We first need to install the runtime.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build rocm-runtime</span></span></code></pre>\n<p>This may have some prerequisites and they can be installed the same way.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build {required applications}</span></span></code></pre>\n<p>This may take some time depending on your system but is the base we need before building ROCm OpenCL.</p>\n<p>To install the Radeon Open Compute version of OpenCL we need to build it from source with a custom PKGBUILD. We can do this a few ways… we can use pamac and edit the PKGBUILD, or we can run pamac to get the build info and then download the PKGBUILD that is edited into the location.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build rocm-opencl-git</span></span></code></pre>\n<p>If you want to edit your PKGBUILD files, I have a copy here: <a href=\"https://gist.github.com/el-barbado/126aae6de40d079782746af637e94231\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/el-barbado/126aae6de40d079782746af637e94231</a></p>\n<p>If you want to just download my PKGBUILD you need to run pamac to create your temporary folder and can just curl the file or wget it to the tmp location. By default this is /var/tmp/pamac-build-{username}/rocm-opencl-git.</p>\n<p>You could also review the AUR for Arch here: <a href=\"https://aur.archlinux.org/packages/rocm-opencl-git/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aur.archlinux.org/packages/rocm-opencl-git/</a></p>\n<p>This build takes some time as well. The PKGBUILD that I have linked fixes some of the prerequisite issues and will specify multi-threading based on system resources. It will make things run much quicker and actually fixes some bugs.</p>\n<p>Once the build is complete we can run some benchmarks!</p>\n<p>I have to run mine with sudo because I haven’t setup the correct group permissions for my user.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo hashcat --benchmark -m 1000 -O --opencl-vector-width 8</span></span></code></pre>\n<p>If you have opencl-mesa installed you will receive an error about it with the command above. You just need to specify the platform:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo hashcat --benchmark -m 1000 -O --opencl-vector-width 8 --opencl-platform 2</span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/700/1*niYbA45wollGFByflZg9vw.png\" alt=\"alt text\"></p>\n<p>This will be faster on a system that isn’t over 10 years old, running multiple virtual machines, and has PCIe v3.0, but it’s not bad for some testing.</p>\n<p>Before we continue, I’m going to add my user to the correct group to not need sudo.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo usermod -a -G video $LOGNAME</span></span></code></pre>\n<p>Let’s test our hashcat install on some actual hashes. You can use any wordlist you’d like. Let’s begin by making ourselves a new user on our system.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo useradd -M test</span></span></code></pre>\n<p>We specify -M to prevent the command from making a home directory. Let’s create a password and then grab the user’s hash and learn about it.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo passwd test\n\n$ sudo grep test /etc/shadow </span></span></code></pre>\n<p><img src=\"https://miro.medium.com/max/700/1*FSiYceBAkj5msYUk-gxOtQ.png\" alt=\"alt text\"></p>\n<p>I set my password to ‘Pa$$w0rd’. It is simple for this example and we can crack it very quickly with hashcat.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">test:$6$.9Hl.zh1SmgNUTY1$ATFrFRKT7QCpaPVgtOtNRadSITnqkux8Zc2TtNFe03V55/WCnFAATYgWAzDCOVb/XL/8gdq21Yq1TZAl8ZgWL/:17947:0:99999:7:::</span></span></code></pre>\n<p>Looking at my hash, $6$ indicates SHA512. The characters after the $6$ up to the next $ are the SALT. For me, that is .9Hl.zh1SmgNUTY1. To further verify what type of hash storage is on our system, we can look at the hash configuration in /etc/login.defs</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo grep ENCRYPT_METHOD /etc/login.defs</span></span></code></pre>\n<p>This returns SHA512 in my case. If you want more details you can view the entire file. Let’s take the hash from the user we created and put it in a file for hashcat.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo grep test /etc/shadow &gt; test.hash</span></span></code></pre>\n<p>Use your preferred editor to remove the username and colon following. We also need to remove the colons and extra characters at the end of the file. For me, the hash looks like this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$6$.9Hl.zh1SmgNUTY1$ATFrFRKT7QCpaPVgtOtNRadSITnqkux8Zc2TtNFe03V55/WCnFAATYgWAzDCOVb/XL/8gdq21Yq1TZAl8ZgWL/</span></span></code></pre>\n<p>We now need a wordlist. I prefer the rockyou list as a base but you can start wherever you’d like. To download the rockyou list go to skullsecurity.org or just</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ wget http://downloads.skullsecurity.org/passwords/rockyou.txt.bz2$ bunzip2 rockyou.txt.bz2</span></span></code></pre>\n<p>We have our hash and our wordlist. Let’s crack it!</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ hashcat -m 1800 -a 0 -O --opencl-vector-width 8 -o found.txt --remove test.hash rockyou.txt</span></span></code></pre>\n<p>Let’s break the command down a bit, -m specifies hash type, -a 0 tells hashcat we are doing a dictionary attack, -O tells hashcat to use the optimized opencl kernel, -o is output file, — remove will delete our hash from the original file.</p>\n<p>Sometimes it can take a bit for hashcat to get started. For me it takes a minute or two to initialize everything.\nhashcat starting</p>\n<p><img src=\"https://miro.medium.com/max/700/1*b8XBUhAfwrIQrawvKYxz9A.png\" alt=\"alt text\" title=\"hashcat starting\"></p>\n<p>Once it gets running though, it took no time at all.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*5UaSgVe3PNgTDg49YLM8og.png\" alt=\"alt text\" title=\"hashcat completed\"></p>\n<p>With initialization and cracking it took less than 2 minutes.</p>\n<p><img src=\"https://miro.medium.com/max/591/1*qyxXtTYVsLvKMTfr1j-VwQ.png\" alt=\"alt text\" title=\"Carcked our hash\"></p>\n<p>Look at the output file specified, you will see the password. It will show the hash followed by the cracked password</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$6$.9Hl.zh1SmgNUTY1$ATFrFRKT7QCpaPVgtOtNRadSITnqkux8Zc2TtNFe03V55/WCnFAATYgWAzDCOVb/XL/8gdq21Yq1TZAl8ZgWL/:Pa$$w0rd</span></span></code></pre>\n<p>A few things to know. The -O option uses an optimized OpenCL kernel that will drastically reduce cracking time. It does have a drawback… any passwords over 8 characters won’t be found. To test on any password over 8 characters you need to remove the -O.</p>\n<p><img src=\"https://miro.medium.com/max/474/1*YdVPbL1bfbfwg1rPHKXE8w.jpeg\" alt=\"alt text\"></p>\n<p>Now let’s move on to some Machine Learning. For this, I’m going to go over installing tensor flow (<a href=\"https://www.tensorflow.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.tensorflow.org</a>).</p>\n<p>Let’s begin by installing miopen. This is AMD’s Machine Intelligence Library.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build rocblas\n\n$ pamac build miopengemm\n\n$ pamac build miopen</span></span></code></pre>\n<p>** rocblas must match the version of rocm you have installed. If you are running 2.0, rocblas must be set to 2.0 as well in the PKGBUILD file.</p>\n<p>Once this compiles the kernels we can start our tensorflow install. There are three ways we can do this. We can compile from source, we can install via pip, via Anaconda, or we can use docker. I prefer docker because it is the easiest.</p>\n<p>For pip you need to have python-pip installed.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ sudo pacman -S python-pip\n\n$ pip install --user tensorflow-rocm</span></span></code></pre>\n<p>For Anaconda we need to install it as well. You can go the full Anaconda route or the miniconda route. I prefer mini because I don’t need the full features.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build miniconda3</span></span></code></pre>\n<p>Once the build completes we just complete the onscreen instructions. From here we can install tensorflow-rocm.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ conda install -c rocm tensorflow-rocm</span></span></code></pre>\n<p>Once installation completes we will need to add the anaconda python to our $PATH. By default this is /opt/miniconda.</p>\n<p>For my favorite way, docker, we just need to follow the instructions here: <a href=\"https://hub.docker.com/r/rocm/tensorflow/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hub.docker.com/r/rocm/tensorflow/</a></p>\n<p>I’m not going to get too much into setting up docker and loading the container.</p>\n<p>We are now ready to go!</p>\n<p>I’m not going to get too much into TensorFlow here, I will have another blog post about it as well as Keras. Until then, check out documentation on tensorflow.org and see some of their tutorials.</p>\n<p><img src=\"https://miro.medium.com/max/659/1*BY5NA77e54PDoBWiaKHufw.png\" alt=\"alt text\"></p>\n<p>Another fun machine learning tool is gym from OpenAi. This is much simpler to get started.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ git clone https://github.com/openai/gym.git\n\n$ cd gym\n\n$ sudo pip install -e .</span></span></code></pre>\n<p>Here you can check out the README and the examples folder.</p>\n<p>You could also install via pamac</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">$ pamac build python-gym</span></span></code></pre>\n<p>There is one other main machine learning library. It is called PyTorch. I haven’t used this much so I’m not going to go over installing it.</p>\n<p>I will have another post on projects with Keras, TensorFlow and Gym.</p>\n<p>Enjoy!</p>\n","excerpt":"With the mining craze dying down, there are some amazing deals to be had on eBay and the used PC component market! Here’s what I built using some old hardware and $650. If you are trying to build the","description":"Used mining rigs for hashcat and machine learning","path":"/hashcat-and-machine-learning-on-a-budget/","cover":"https://coincentral.com/wp-content/uploads/2018/05/Bitcoin-Mining-1.jpg","tags":[{"id":"opencl","title":"opencl","path":"/tag/opencl/"},{"id":"AMD","title":"AMD","path":"/tag/AMD/"},{"id":"Arch","title":"Arch","path":"/tag/Arch/"},{"id":"hashcat","title":"hashcat","path":"/tag/hashcat/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}},{"node":{"id":"4925af1c575f9c3be1e4021fd2ab688e","title":"Installing TensorFlow on HTPC","timeToRead":3,"datetime":"2018-11-30 00:00:00","content":"<p>TLDR: Yeah, this isn’t a how to guide or anything, it’s more my experience on leaping before I look. Don’t worry though, if you want to install TensorFlow on Windows 10, this will help if paired with the TensorFlow docs.</p>\n<p>I’ve been looking into updating my old Raspberry Pi cluster to rebuild some of the old Keras convolutional neural networks (cnn) I built to help with the aquaponics project. Well, after I started piecing together the hardware and I noticed I didn’t have enough micro sd cards. Instead of buying them and continuing this route, I thought to myself, why not just use the HTPC? It IS only used for gaming, plex, and other small tasks. Why not put it to use when it is otherwise not? Here’s how I got started…</p>\n<p>First, it is pseudo headless. I say that because it is connected to the TV and the only interface is via a small wireless keyboard (I mean small, like smaller than your average smartphone) or a gamepad. When the kids aren’t playing games, they use the smart interface on the TV (smart tvs and I don’t get along but with it isolated on my network, in a vlan on its own and lots of firewall rules, I can kinda live with it). That meant I had to turn on some of the fun Linux functionality of Windows 10. I enabled OpenSSH Server and Remote Desktop. These allowed me to do anything and everything I could need to do while the kids are happily (or unhappily) watching whatever they choose. Even if playing a game, I could still ssh over to run processes. That reminds me, I should move homeassistant over to it instead of the raspberry pi… hmmm… Anyway, for those that aren’t sure how to turn these on, search in settings dialog for them and they come right up.</p>\n<p>Now that we can remotely do all the things, we need to ensure we have all the software we need installed. TensorFlow is very much related to versions of other software and doesn’t work at all outside of them. This is something everyone should pay very close attention to. I did not and went about my normal Arch Linux way of doing things and installed the latest version of Python for Windows, Cuda, and CudNN. I thought, hell yes! Let’s get to TensorFlow! That’s not how things wanted to work. TensorFlow kept refusing to install. Apparently reading documentation was something I should have done. The latest version of Python is 3.7.1. TensorFlow will work with 3.6 but not 3.7. After installing the needed version of Python I was ready and got back to it. No no, said dear TensorFlow. After installing, which went perfectly well this time, it kept throwing DLL errors. I read further in the docs and found Cuda 10 is not supported. I went back and installed Cuda 9 and the matching version of CudNN. Things are going great! The current version of TensorFlow (as of this post) is 1.12.</p>\n<p>Once things were all working as they should I went back to my old code. It looks good, but I’ve never really worked with TensorFlow before, only Keras when it was its own thing. I’m going to use this as a learning opportunity and rewrite the CNN as well as add new functionality. For now, downloading new data sets… first, I’m going to start with all of reddit ;-)</p>\n<p>The reason for using reddit posts is because I want to be able to have the projects communicate effectively. Essentially with reddit, it will be a total ass like I am. I’m totally ok with this.</p>\n<p>For those interested, the reddit posts dataset can be downloaded here (torrent):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292eff\">magnet:?xt=urn:btih:7690f71ea949b868080401c749e878f98de34d3d&amp;dn=reddit%5Fdata&amp;tr=http%3A%2F%2Ftracker.pushshift.io%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80</span></span></code></pre>\n<p>The full info about this can be found on reddit in <a href=\"https://www.reddit.com/r/datasets/comments/3bxlg7/i_have_every_publicly_available_reddit_comment/?utm_content=body&#x26;utm_medium=post_embed&#x26;utm_name=b5032bf0e4234a84a3f91d2d74a02d0e&#x26;utm_source=embedly&#x26;utm_term=3bxlg7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/r/datasets</a></p>\n","excerpt":"TLDR: Yeah, this isn’t a how to guide or anything, it’s more my experience on leaping before I look. Don’t worry though, if you want to install TensorFlow on Windows 10, this will help if paired with","description":"Thoughts on installation experience","path":"/installing-tensor-flow-on-htpc/","cover":"https://cdn-images-1.medium.com/max/1600/0*xn9KO7B_Bwa5pPB9.jpg","tags":[{"id":"tensorflow","title":"tensorflow","path":"/tag/tensorflow/"},{"id":"htpc","title":"htpc","path":"/tag/htpc/"},{"id":"machine learning","title":"machine learning","path":"/tag/machine%20learning/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}},{"node":{"id":"4747d7e9bffd02bd00cf6f2974521a2b","title":"HTPC Part 2","timeToRead":2,"datetime":"2018-11-07 00:00:00","content":"<p>It has been a while since I did part 1. Once the system was up and running my kids didn’t give me any time to run benchmarks, change settings, or really have fun with the overclocking. I’ve finally finished everything and have numbers!</p>\n<p>I went a bit wild to start. I set the clock speed on GPU (EVGA GeForce GTX 1080Ti Founders Edition) to 2 GHz and set the power consumption and memory as fast as it would go. This paired with the 4.3 GHz (Ryzen 7 2700X) on all cores of CPU things were rocking at 4k! My kids play mostly Lego games and some emulated games so things were running stable and at great temps! As I’m sure you all guessed, when I finally had a chance to hop on Far Cry 5 things tanked, and they tanked HARD.</p>\n<p>After the crash, I sat down and really thought about what I wanted to achieve. This system sits in an entertainment center with minimal airflow. It only has one 240mm radiator for both the CPU and GPU. I really shouldn’t be pushing it to the limit. The previous iteration at least had an additional 120mm radiator to help out and I added the 1080 Ti to replace the fried 1080 which only increased thermals. After thinking long and hard about what my goals were, I decided. I’m pushing it as far as I can without noise or heat being obnoxious. Here’s how I did…</p>\n<p>CPU — 4.3 GHz on all cores. I could honestly go further but I think that’s a good spot to be for now. Maybe in the future, I can see about a bit more (I can probably get to 4.5 but with the entertainment center I don’t know).</p>\n<p>GPU — Base clock is at 1780 MHz and boost clock is at 2000 MHz. Memory is clocked at 5000 MHz.</p>\n<p>RAM — I was able to crank quite a bit out of RAM, it went from 3200 up to 4400 without any trial and error. I just set the base multiplier and it took it right away.</p>\n<p>After all of this, gameplay max thermals are the high 60s. I’m completely amazed by the ability of the aluminum water cooking kits from EK. Mini ITX is notoriously bad for case airflow, and the Fractal Design Node 500 is a great case but with everything I have packed inside airflow is certainly not the best.</p>\n<p>I was going to post benchmarks and do a full video as well but unfortunately, I haven’t had the time recently. If there is interest, I can do a follow up with benchmarks and further info.</p>\n","excerpt":"It has been a while since I did part 1. Once the system was up and running my kids didn’t give me any time to run benchmarks, change settings, or really have fun with the overclocking. I’ve finally","description":"HTPC Update","path":"/htpc-part-2/","cover":"https://images.bit-tech.net/content_images/2010/07/fractal-design-array-r2-m-itx-case-review/array-overview.jpg","tags":[{"id":"htpc","title":"htpc","path":"/tag/htpc/"},{"id":"gaming","title":"gaming","path":"/tag/gaming/"}],"author":{"id":"b34rd","title":"b34rd","path":"/author/b34rd/"}}}]}},"context":{}}